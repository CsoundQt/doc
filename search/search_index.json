{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to CsoundQt CsoundQt is a frontend for Csound featuring a highlighting editor with autocomplete, interactive widgets and integrated help. It is a cross-platform and aims to be a simple yet powerful and complete development environment for Csound.","title":"Home"},{"location":"#welcome-to-csoundqt","text":"CsoundQt is a frontend for Csound featuring a highlighting editor with autocomplete, interactive widgets and integrated help. It is a cross-platform and aims to be a simple yet powerful and complete development environment for Csound.","title":"Welcome to CsoundQt"},{"location":"config_advanced/","text":"The Advanced Tab The first two options are important for live settings as the latency mostly depends on them. Buffer Size (-b) This defines the software buffer size in samples (corresponding with the -b flag). If you do not tick, CsoundQt will use the defaults. According to the Csound Manual these are 256 samples on Linux, 1024 on MacOS X, and 4096 on Windows. If you tick to enter an own value, these are some hints: - Always use power-of-two values. - Usually the ksmps block size is 1/4 or 1/2 of the software buffer size. If you use live input and output, it is most effective to set the software buffer size to an integer multiple of ksmps (\"full duplex audio\"). - Use smaller values (e.g. 128) for live performance (in particular with live input), as it will reduce the latency. Use larger values (e.g. 1024) for other cases, for instance playing sound files. HW Buffer Size (-B) This defines the hardware buffer size in samples (corresponding with the -B flag). If you do not tick, CsoundQt will use the defaults. According to the Csound Manual these are 1024 samples on Linux, 4096 on Mac OS X and 16384 on Windows. If you tick to enter an own value, these are some hints: - Always use a multiple integer of the software buffer size. A common relation is: Hardware Buffer Size = 4 * Software Buffer Size. - The relation between software buffer size and hardware buffer size depends on the audio module.[1] Multicore You can try to set this to a number larger than one in case you hit the performance limit in real-time computing. It may or may not help. This is very much depending on your code. Sample-accurate Enable sample-accurate mode. In this mode rendering is not quantized to performance cycles but starts at the specified sample corresponding to the start time of an event. Realtime Realtime priority mode. In this mode all initialization (loading of buffers, etc) is done in a background thread. The scheduled instrument starts executing when these background tasks are finished. This can help to eliminate dropouts (but might have a negative effect in scheduling accuracy). NB: in realtime mode all printing is done to stderr. In order to see the effect of any printing opcodes open CsoundQt from the command line. All printing will be visible at the terminal. Check syntax before running In some cases csound might crash (and CsoundQt might crash with it) before any debugging information is visible in the CsoundQt console (during compilation). For such cases turn on this option to do a syntax check prior to running csound with full communication with widgets, etc. Daemon Do not exit if CSD/orchestra is not given, is empty or does not compile. NB : use with care. In the case of syntax errors csound will keep execution in at times undefined state, causing crashes and possibly bringing CsoundQt down with it. NB2 : in the absence of a score or of any events within the CsScore tag csound goes into daemon mode by default. Use limiter / Additional flags / jack Client Name These options should be self explanatory. [1] In the explanation of Victor Lazzarini (Email to Joachim Heintz, 19 march 2013): 1. For portaudio, -B is only used to suggest a latency to the backend, whereas -b is used to set the actual buffersize. 2. For coreaudio, -B is used as the size of the internal circular buffer, and -b is used for the actual IO buffer size. 3. For jack, -B is used to determine the number of buffers used in conjunction with -b , num = (N + M + 1) / M. -b is the size of each buffer. 4. For alsa, -B is the size of the buffer size, -b is the period size (a buffer is divided into periods). 5. For pulse, -b is the actual buffersize passed to the device, -B is not used. In other words, -B is not too significant in 1), not used in 5), but has a part to play in 2), 3) and 4), which is functionally similar.","title":"Advanced Tab"},{"location":"config_advanced/#the-advanced-tab","text":"The first two options are important for live settings as the latency mostly depends on them.","title":"The Advanced Tab"},{"location":"config_advanced/#buffer-size-b","text":"This defines the software buffer size in samples (corresponding with the -b flag). If you do not tick, CsoundQt will use the defaults. According to the Csound Manual these are 256 samples on Linux, 1024 on MacOS X, and 4096 on Windows. If you tick to enter an own value, these are some hints: - Always use power-of-two values. - Usually the ksmps block size is 1/4 or 1/2 of the software buffer size. If you use live input and output, it is most effective to set the software buffer size to an integer multiple of ksmps (\"full duplex audio\"). - Use smaller values (e.g. 128) for live performance (in particular with live input), as it will reduce the latency. Use larger values (e.g. 1024) for other cases, for instance playing sound files.","title":"Buffer Size (-b)"},{"location":"config_advanced/#hw-buffer-size-b","text":"This defines the hardware buffer size in samples (corresponding with the -B flag). If you do not tick, CsoundQt will use the defaults. According to the Csound Manual these are 1024 samples on Linux, 4096 on Mac OS X and 16384 on Windows. If you tick to enter an own value, these are some hints: - Always use a multiple integer of the software buffer size. A common relation is: Hardware Buffer Size = 4 * Software Buffer Size. - The relation between software buffer size and hardware buffer size depends on the audio module.[1]","title":"HW Buffer Size (-B)"},{"location":"config_advanced/#multicore","text":"You can try to set this to a number larger than one in case you hit the performance limit in real-time computing. It may or may not help. This is very much depending on your code.","title":"Multicore"},{"location":"config_advanced/#sample-accurate","text":"Enable sample-accurate mode. In this mode rendering is not quantized to performance cycles but starts at the specified sample corresponding to the start time of an event.","title":"Sample-accurate"},{"location":"config_advanced/#realtime","text":"Realtime priority mode. In this mode all initialization (loading of buffers, etc) is done in a background thread. The scheduled instrument starts executing when these background tasks are finished. This can help to eliminate dropouts (but might have a negative effect in scheduling accuracy). NB: in realtime mode all printing is done to stderr. In order to see the effect of any printing opcodes open CsoundQt from the command line. All printing will be visible at the terminal.","title":"Realtime"},{"location":"config_advanced/#check-syntax-before-running","text":"In some cases csound might crash (and CsoundQt might crash with it) before any debugging information is visible in the CsoundQt console (during compilation). For such cases turn on this option to do a syntax check prior to running csound with full communication with widgets, etc.","title":"Check syntax before running"},{"location":"config_advanced/#daemon","text":"Do not exit if CSD/orchestra is not given, is empty or does not compile. NB : use with care. In the case of syntax errors csound will keep execution in at times undefined state, causing crashes and possibly bringing CsoundQt down with it. NB2 : in the absence of a score or of any events within the CsScore tag csound goes into daemon mode by default.","title":"Daemon"},{"location":"config_advanced/#use-limiter-additional-flags-jack-client-name","text":"These options should be self explanatory. [1] In the explanation of Victor Lazzarini (Email to Joachim Heintz, 19 march 2013): 1. For portaudio, -B is only used to suggest a latency to the backend, whereas -b is used to set the actual buffersize. 2. For coreaudio, -B is used as the size of the internal circular buffer, and -b is used for the actual IO buffer size. 3. For jack, -B is used to determine the number of buffers used in conjunction with -b , num = (N + M + 1) / M. -b is the size of each buffer. 4. For alsa, -B is the size of the buffer size, -b is the period size (a buffer is divided into periods). 5. For pulse, -b is the actual buffersize passed to the device, -B is not used. In other words, -B is not too significant in 1), not used in 5), but has a part to play in 2), 3) and 4), which is functionally similar.","title":"Use limiter / Additional flags / jack Client Name"},{"location":"config_editor/","text":"The Editor Tab Only one option needs some explanation: Autoplay files when launched from file If ticked, a csd file will play immediately when opened.","title":"Editor Tab"},{"location":"config_editor/#the-editor-tab","text":"Only one option needs some explanation:","title":"The Editor Tab"},{"location":"config_editor/#autoplay-files-when-launched-from-file","text":"If ticked, a csd file will play immediately when opened.","title":"Autoplay files when launched from file"},{"location":"config_environment/","text":"The Environment Tab There are some important settings here, along with some only for developers. We will focus on the options which can be important for all users. Html doc directory This refers to the folder containing the Canonical Csound Manual. If you choose View > Help Panel , and see nothing but a message like \"not found!\", you will have to set here the directory for the manual. Click on the browse button on the right side, and choose the folder where it is on your computer. SADIR (Sound Analysis Directory) You can set here the directory in which Csound will seek for analysis files like .pvx files. SSDIR (Sound Sample Directory) This is very useful to set a folder for sound samples, for instance used by diskin . You can then refer to the sample only by name. SFDIR (Sound File Directory) To specify a directory for output files. This is usually be done in the Run tab, as explained above (Output Filename). INCDIR (Include Directory) Specifies a directory for files which all called by the #include statement. Favorite dir Specifies a directory which will then appear under the menu as 'Favorites'. Python script dir Usually you will leave this empty so that CsoundQt links to the Python Scripts it comes with. Only specify if you build CsoundQt or want to change the scripts folder.","title":"Environment Tab"},{"location":"config_environment/#the-environment-tab","text":"There are some important settings here, along with some only for developers. We will focus on the options which can be important for all users.","title":"The Environment Tab"},{"location":"config_environment/#html-doc-directory","text":"This refers to the folder containing the Canonical Csound Manual. If you choose View > Help Panel , and see nothing but a message like \"not found!\", you will have to set here the directory for the manual. Click on the browse button on the right side, and choose the folder where it is on your computer.","title":"Html doc directory"},{"location":"config_environment/#sadir-sound-analysis-directory","text":"You can set here the directory in which Csound will seek for analysis files like .pvx files.","title":"SADIR (Sound Analysis Directory)"},{"location":"config_environment/#ssdir-sound-sample-directory","text":"This is very useful to set a folder for sound samples, for instance used by diskin . You can then refer to the sample only by name.","title":"SSDIR (Sound Sample Directory)"},{"location":"config_environment/#sfdir-sound-file-directory","text":"To specify a directory for output files. This is usually be done in the Run tab, as explained above (Output Filename).","title":"SFDIR (Sound File Directory)"},{"location":"config_environment/#incdir-include-directory","text":"Specifies a directory for files which all called by the #include statement.","title":"INCDIR (Include Directory)"},{"location":"config_environment/#favorite-dir","text":"Specifies a directory which will then appear under the menu as 'Favorites'.","title":"Favorite dir"},{"location":"config_environment/#python-script-dir","text":"Usually you will leave this empty so that CsoundQt links to the Python Scripts it comes with. Only specify if you build CsoundQt or want to change the scripts folder.","title":"Python script dir"},{"location":"config_external/","text":"The External Tab Should be self-explanatory. 'Dot' is the executable from www.graphviz.org. It is used in CsoundQt for the Code Graph Viewer ( View > View Code Graph ).","title":"External Tab"},{"location":"config_external/#the-external-tab","text":"Should be self-explanatory. 'Dot' is the executable from www.graphviz.org. It is used in CsoundQt for the Code Graph Viewer ( View > View Code Graph ).","title":"The External Tab"},{"location":"config_general/","text":"The General Tab The setting here are self-explanatory.","title":"General Tab"},{"location":"config_general/#the-general-tab","text":"The setting here are self-explanatory.","title":"The General Tab"},{"location":"config_intro/","text":"CsoundQt Configuration CsoundQt gives easy access to the most important Csound options and to many specific CsoundQt settings via its Configuration Panel. In particular the Run tab offers many choices which have to be understood and set carefully. To open the configuration panel simply push the 'Configure' button, or go to Configuration/Preferences in the File menu. The configuration panel comprises eight tabs. The available configurable parameters in each tab are described below for each tab.","title":"Introduction"},{"location":"config_intro/#csoundqt-configuration","text":"CsoundQt gives easy access to the most important Csound options and to many specific CsoundQt settings via its Configuration Panel. In particular the Run tab offers many choices which have to be understood and set carefully. To open the configuration panel simply push the 'Configure' button, or go to Configuration/Preferences in the File menu. The configuration panel comprises eight tabs. The available configurable parameters in each tab are described below for each tab.","title":"CsoundQt Configuration"},{"location":"config_run/","text":"The Run Tab The settings at the top of the \u201cRun\u201d tab allow the user to define the command-line flags with which Csound is invoked. Realtime Audio These options determine CsoundQt's behaviour if you push the Run button (or select the menu item Control -> Run Csound). Basic Settings In the left half we find all basic settings for dealing with real-time audio. Override Tick this to activate the CsoundQt options configured here. Ignore CsOptions Use this to ignore the option embedded in the section of the csd files you are running. NOTE that care must be taken to avoid inconsistencies between CsOptions and CsoundQt options. For beginners, it is recommended to disable CsOptions when the CsoundQT options are enabled. If you are a more experienced user, you can leave this unchecked to allow some additional options like -m128 to reduce Csound's printout. NOTE that if you have checked \"Use CsoundQt options\" and have not checked \"Ignore CsOptions\", in the case of a conflict between both the CsoundQt options set in the configure panel will have the priority. RT Audio Module This option is very much dependent on your operating system. In case you experience crashes or have problems with the real time performance, it is worth to try another module. The most common choices on the different operating systems are probably: - For Linux, use alsa or jack. - For OSX, use coreaudio or portaudio. - For Windows, use portaudio. Input device This option selects the device you are using for real-time input, for instance from a microphone. (Note that you must have ticked \"Use CsoundQt options\" if you want Csound to use your selection.) The usual (and most stable) choice here is adc . In this case Csound will use the device which has been selected as standard by your operating system. If you want to use another device instead, click on the button at the right side. You will find a list of available devices and can choose one of them. If you don't have realtime input, choose \"no input\". NOTE : The portaudio module usually requires the same number of input and output channels. Some computers have 2 output channels but a microphone with only 1 input channel. In this case you will get the error: *** PortAudio: error: -9998: Invalid number of channels . Use nchnls_i = 1 in your csd header in this case, or if you have no live input, set the Input device (-i) field to \"No input\". Output device This option selects the device you are using for real-time output. (Note that you must have ticked \"Use CsoundQt options\" if you want Csound to use your selection.) The usual (and most stable) choice here is dac . In this case Csound will use the device which has been selected as standard by your operating system. If you want to use another device instead, click on the button at the right side. You will find a list of available devices and can choose one of them. Test Audio In the right half we find direct access to a built-in audio test and some additional possibilities. Samplerate Usually Csound will use the sample rate which is set in the .csd file as the sr statement. In case you prefer other options, you can set here to use the system sample rate or some standard sizes. Channels Usually Csound will use the number of channels which is set in the .csd file as the nchnls statement. In case you prefer other options, you can set here the number of input and output channels. Realtime MIDI Csound MIDI Module Left hand side you choose whether you use the internal Csound MIDI handler, or CsoundQt's own MIDI handler. In general you will not check this box because you will want to use CsoundQt's own MIDI handler (which is RtMidi ). If you choose to use Csound's internal MIDI module instead, you will not be able to use the built-in connection between MIDI devices and CsoundQt widgets. Internal Input If you opt for CsoundQt's internal MIDI handler (by NOT checking the Csund MIDI Module box), you select here the MIDI device to be used by CsoundQt. Note that you can NOT chosse more than one device here. If you want to use two or more MIDI devices, you must merge them via hardware or software. Internal Output This is only when you send MIDI to an external device. Offline Rendering These options determine CsoundQt's behaviour if you render to file (by pushing the Render button or selecting the menu item Control > Render to file ). Override Tick this to activate the CsoundQt options configured here. Ignore CsOptions Use this to ignore the option embedded in the section of the csd files you are rendering. NOTE that care must be taken to avoid inconsistencies between CsOptions and CsoundQt options. For beginners, it is recommended to tick \"Ignore CsOptions\" when the CsoundQT options are enabled. If you are a more experienced user, you can leave this unchecked to allow some additional options like -m128 to reduce Csound's printout. NOTE that if you have checked \"Use CsoundQt options\" and have not checked \"Ignore CsOptions\", in the case of a conflict between both the CsoundQt options set in the configure panel will have the priority. Ask for filename Ask for a filename to render the performance to. For beginners it is recommended to activate it. Otherwise it may happen that you acidentally overwrite an already existing file. File type / Sample format Use this to set the output file format. Input Filename Corresponds with the -i flag (Input soundfile name). Output Filename Corresponds with the -o flag for defining the output file name to which the sound is written.","title":"Run Tab"},{"location":"config_run/#the-run-tab","text":"The settings at the top of the \u201cRun\u201d tab allow the user to define the command-line flags with which Csound is invoked.","title":"The Run Tab"},{"location":"config_run/#realtime-audio","text":"These options determine CsoundQt's behaviour if you push the Run button (or select the menu item Control -> Run Csound).","title":"Realtime Audio"},{"location":"config_run/#basic-settings","text":"In the left half we find all basic settings for dealing with real-time audio.","title":"Basic Settings"},{"location":"config_run/#override","text":"Tick this to activate the CsoundQt options configured here.","title":"Override"},{"location":"config_run/#ignore-csoptions","text":"Use this to ignore the option embedded in the section of the csd files you are running. NOTE that care must be taken to avoid inconsistencies between CsOptions and CsoundQt options. For beginners, it is recommended to disable CsOptions when the CsoundQT options are enabled. If you are a more experienced user, you can leave this unchecked to allow some additional options like -m128 to reduce Csound's printout. NOTE that if you have checked \"Use CsoundQt options\" and have not checked \"Ignore CsOptions\", in the case of a conflict between both the CsoundQt options set in the configure panel will have the priority.","title":"Ignore CsOptions"},{"location":"config_run/#rt-audio-module","text":"This option is very much dependent on your operating system. In case you experience crashes or have problems with the real time performance, it is worth to try another module. The most common choices on the different operating systems are probably: - For Linux, use alsa or jack. - For OSX, use coreaudio or portaudio. - For Windows, use portaudio.","title":"RT Audio Module"},{"location":"config_run/#input-device","text":"This option selects the device you are using for real-time input, for instance from a microphone. (Note that you must have ticked \"Use CsoundQt options\" if you want Csound to use your selection.) The usual (and most stable) choice here is adc . In this case Csound will use the device which has been selected as standard by your operating system. If you want to use another device instead, click on the button at the right side. You will find a list of available devices and can choose one of them. If you don't have realtime input, choose \"no input\". NOTE : The portaudio module usually requires the same number of input and output channels. Some computers have 2 output channels but a microphone with only 1 input channel. In this case you will get the error: *** PortAudio: error: -9998: Invalid number of channels . Use nchnls_i = 1 in your csd header in this case, or if you have no live input, set the Input device (-i) field to \"No input\".","title":"Input device"},{"location":"config_run/#output-device","text":"This option selects the device you are using for real-time output. (Note that you must have ticked \"Use CsoundQt options\" if you want Csound to use your selection.) The usual (and most stable) choice here is dac . In this case Csound will use the device which has been selected as standard by your operating system. If you want to use another device instead, click on the button at the right side. You will find a list of available devices and can choose one of them.","title":"Output device"},{"location":"config_run/#test-audio","text":"In the right half we find direct access to a built-in audio test and some additional possibilities.","title":"Test Audio"},{"location":"config_run/#samplerate","text":"Usually Csound will use the sample rate which is set in the .csd file as the sr statement. In case you prefer other options, you can set here to use the system sample rate or some standard sizes.","title":"Samplerate"},{"location":"config_run/#channels","text":"Usually Csound will use the number of channels which is set in the .csd file as the nchnls statement. In case you prefer other options, you can set here the number of input and output channels.","title":"Channels"},{"location":"config_run/#realtime-midi","text":"","title":"Realtime MIDI"},{"location":"config_run/#csound-midi-module","text":"Left hand side you choose whether you use the internal Csound MIDI handler, or CsoundQt's own MIDI handler. In general you will not check this box because you will want to use CsoundQt's own MIDI handler (which is RtMidi ). If you choose to use Csound's internal MIDI module instead, you will not be able to use the built-in connection between MIDI devices and CsoundQt widgets.","title":"Csound MIDI Module"},{"location":"config_run/#internal-input","text":"If you opt for CsoundQt's internal MIDI handler (by NOT checking the Csund MIDI Module box), you select here the MIDI device to be used by CsoundQt. Note that you can NOT chosse more than one device here. If you want to use two or more MIDI devices, you must merge them via hardware or software.","title":"Internal Input"},{"location":"config_run/#internal-output","text":"This is only when you send MIDI to an external device.","title":"Internal Output"},{"location":"config_run/#offline-rendering","text":"These options determine CsoundQt's behaviour if you render to file (by pushing the Render button or selecting the menu item Control > Render to file ).","title":"Offline Rendering"},{"location":"config_run/#override_1","text":"Tick this to activate the CsoundQt options configured here.","title":"Override"},{"location":"config_run/#ignore-csoptions_1","text":"Use this to ignore the option embedded in the section of the csd files you are rendering. NOTE that care must be taken to avoid inconsistencies between CsOptions and CsoundQt options. For beginners, it is recommended to tick \"Ignore CsOptions\" when the CsoundQT options are enabled. If you are a more experienced user, you can leave this unchecked to allow some additional options like -m128 to reduce Csound's printout. NOTE that if you have checked \"Use CsoundQt options\" and have not checked \"Ignore CsOptions\", in the case of a conflict between both the CsoundQt options set in the configure panel will have the priority.","title":"Ignore CsOptions"},{"location":"config_run/#ask-for-filename","text":"Ask for a filename to render the performance to. For beginners it is recommended to activate it. Otherwise it may happen that you acidentally overwrite an already existing file.","title":"Ask for filename"},{"location":"config_run/#file-type-sample-format","text":"Use this to set the output file format.","title":"File type / Sample format"},{"location":"config_run/#input-filename","text":"Corresponds with the -i flag (Input soundfile name).","title":"Input Filename"},{"location":"config_run/#output-filename","text":"Corresponds with the -o flag for defining the output file name to which the sound is written.","title":"Output Filename"},{"location":"config_template/","text":"The Template tab This tab is useful as it allows the user to define a default template for new CSDs.","title":"Template Tab"},{"location":"config_template/#the-template-tab","text":"This tab is useful as it allows the user to define a default template for new CSDs.","title":"The Template tab"},{"location":"config_widgets/","text":"The Widgets Tab Enable Widgets If not checked, you cannot use any of CsoundQt's widgets. Save Widgets in csd file Each csd file has a section for widgets and presets. These sections are hidden when you open your csd file in CsoundQt, but are visible in any text editor. So if you do not have checked this option, you will not see any of your widgets the next time you open your csd. So, only useful if you want to export a csd without the widget tags. Show Widgets on play If checked, the widget panel will pop up each time you push the Play button. Show tooltips for widgets Enables a useful feature which lets you see the channel name of a widget if you stay a moment on it with the computer mouse. Enable FLTK FLTK means a built-in (and somehow outdated) method of using widgets in Csound. As these widgets could conflict with CsoundQt's own widgets, you will usually uncheck this. Open properties when creating widgets Usually you will this have ticked, to enter your channel name and other properties when you create a widget. Widgets are an independent window CsoundQt consists of many subwindows except the main Editor panel: the Console, the Help (Manual), the Inspector, and so on. If you check this option, the widget panel will not be considered as one of them, but as independent window. This means that you cannot dock it by double-clicking on the top, like all the other subwindows, but it may have advantages anyhow, depending on your operating system and your configuration. Font scaling / Font offset Affects the way the fonts are shown for instance in a Label widget.","title":"Widgets Tab"},{"location":"config_widgets/#the-widgets-tab","text":"","title":"The Widgets Tab"},{"location":"config_widgets/#enable-widgets","text":"If not checked, you cannot use any of CsoundQt's widgets.","title":"Enable Widgets"},{"location":"config_widgets/#save-widgets-in-csd-file","text":"Each csd file has a section for widgets and presets. These sections are hidden when you open your csd file in CsoundQt, but are visible in any text editor. So if you do not have checked this option, you will not see any of your widgets the next time you open your csd. So, only useful if you want to export a csd without the widget tags.","title":"Save Widgets in csd file"},{"location":"config_widgets/#show-widgets-on-play","text":"If checked, the widget panel will pop up each time you push the Play button.","title":"Show Widgets on play"},{"location":"config_widgets/#show-tooltips-for-widgets","text":"Enables a useful feature which lets you see the channel name of a widget if you stay a moment on it with the computer mouse. Enable FLTK FLTK means a built-in (and somehow outdated) method of using widgets in Csound. As these widgets could conflict with CsoundQt's own widgets, you will usually uncheck this.","title":"Show tooltips for widgets"},{"location":"config_widgets/#open-properties-when-creating-widgets","text":"Usually you will this have ticked, to enter your channel name and other properties when you create a widget.","title":"Open properties when creating widgets"},{"location":"config_widgets/#widgets-are-an-independent-window","text":"CsoundQt consists of many subwindows except the main Editor panel: the Console, the Help (Manual), the Inspector, and so on. If you check this option, the widget panel will not be considered as one of them, but as independent window. This means that you cannot dock it by double-clicking on the top, like all the other subwindows, but it may have advantages anyhow, depending on your operating system and your configuration.","title":"Widgets are an independent window"},{"location":"config_widgets/#font-scaling-font-offset","text":"Affects the way the fonts are shown for instance in a Label widget.","title":"Font scaling / Font offset"},{"location":"gs_contribute/","text":"Contribute CsoundQt exists because some musicians and programmers engage for it. We (Andr\u00e9s. Tarmo, Eduardo, Joachim, Eugenio and many others) do it as we want to use a tool which is our common property. Everyone is invited to use it, too: Without any fee or restriction. We welcome and need contributions from you, the users of this software. These contributions can be very different. Here are some typical cases: Did you find a bug? Tell us what is not working. For this, we need some information: What are you doing? Try to explain step by step so that we can reproduce this error. What is the expected behaviour, and what is happening instead? Which version of CsoundQt and which version of Csound do you use? What is your operating system, and which version? To give an example: When I select the Hello World example from Examples > CsoundQt > Getting Started > Basics, and press the Run button, I do not hear any sound. I use CsoundQt 1.1.3 and Csound 6.18. I am on Windows 11. The best place for bug reports is the to file a ticket in the Github Issue Tracker . What you need to do for it is to sign in at Github. the second best place is to send an email at the CsoundQt User Mailing List . After subscribing, you can send a email at the list. Examples not working? If any of the built-in examples are not working, please let us know, too. Or if you have suggestions for improvements. Or if you have an example you would like to contribute ... Suggestions for improvements? If you miss a feature which you know from other software, please open a ticket in the Github Discussions tracker. Or write an Email to the CsoundQt User Mailing List . Join the development team? If you are a developer and have improvements to the code, please send a pull request via CsoundQt's Github Page .","title":"Contribute"},{"location":"gs_contribute/#contribute","text":"CsoundQt exists because some musicians and programmers engage for it. We (Andr\u00e9s. Tarmo, Eduardo, Joachim, Eugenio and many others) do it as we want to use a tool which is our common property. Everyone is invited to use it, too: Without any fee or restriction. We welcome and need contributions from you, the users of this software. These contributions can be very different. Here are some typical cases:","title":"Contribute"},{"location":"gs_contribute/#did-you-find-a-bug","text":"Tell us what is not working. For this, we need some information: What are you doing? Try to explain step by step so that we can reproduce this error. What is the expected behaviour, and what is happening instead? Which version of CsoundQt and which version of Csound do you use? What is your operating system, and which version? To give an example: When I select the Hello World example from Examples > CsoundQt > Getting Started > Basics, and press the Run button, I do not hear any sound. I use CsoundQt 1.1.3 and Csound 6.18. I am on Windows 11. The best place for bug reports is the to file a ticket in the Github Issue Tracker . What you need to do for it is to sign in at Github. the second best place is to send an email at the CsoundQt User Mailing List . After subscribing, you can send a email at the list.","title":"Did you find a bug?"},{"location":"gs_contribute/#examples-not-working","text":"If any of the built-in examples are not working, please let us know, too. Or if you have suggestions for improvements. Or if you have an example you would like to contribute ...","title":"Examples not working?"},{"location":"gs_contribute/#suggestions-for-improvements","text":"If you miss a feature which you know from other software, please open a ticket in the Github Discussions tracker. Or write an Email to the CsoundQt User Mailing List .","title":"Suggestions for improvements?"},{"location":"gs_contribute/#join-the-development-team","text":"If you are a developer and have improvements to the code, please send a pull request via CsoundQt's Github Page .","title":"Join the development team?"},{"location":"gs_edit/","text":"Edit and Get Help You can find a short description of all Menu Items in the Menu section of this documentation. This page focusses on some features of the CsoundQt Editor. Code completion When you type, for instance, the letters \"tab\", you will see different options for code completion: Choose one of them with the mouse or the arrow key. You have two choices now: \u2014 tab will only complete the opcode name; \u2014 return will also insert the arguments with the names found in the manual. Any of your own variable names will offer self-completion, too. Access to the Csound Manual When you select any opcode (double-click on it), or have the cursor in it, you can get the corresponding page of the Canonical Csound Manual by selecting either Help > Shop Opcode Entry (or Shift+F1), or choose Opcode Help from the context menu (which you get by right-click on the opcode name). You can also find a short info about the opcode at the bottom of the Editor's panel. Code Graph Select Examples > Getting Started > Toots > Toot 1 , and then View > View Code Graph . You should see this drawing: It is not perfect, but quite useful to show the signal flow for simple csd files. If it is not working, try to set the graphviz dot application in Configure > External Programs > Dot . Inspector When you click on the Inspector button (or View > Inspector ), you get a panel which is quite useful for extended Csound code: You can navigate easily to any part of the code, or in the score. Split View Instead of the usual raw-text mode, CsoundQt offers a split view for both, the orchestra and the score. Go to View > Split View , and you will see the score changed to a spread-sheet-like view, and the tags (CsOptions etc) disappeared. You can choose which sections to show or to hide: Recompile / Evaluate Python Code Since Csound 6, it is possible to change any instrument definition while Csound is running. CsoundQt provides an easy way of recompiling. This be your Csound code: instr 1 schedkwhen metro(1), 0, 0, 2, 0, 1 endin instr 2 prints \"Hallo\\n\" endin schedule(1,0,1000) Run this code and change the print statement in instrument 2 from \"Hallo\\n\" to \"HalloHallo\\n\" or whatever. Nothing will happen, as Csound needs a command to recompile instrument 2. Now place the cursor anywhere in instrument 2, go to the Edit menu, and select Evaluate Section . You will see a message in the console: \"Csound code evaluated.\", and after this message you will see the new printout.","title":"Edit and Get Help"},{"location":"gs_edit/#edit-and-get-help","text":"You can find a short description of all Menu Items in the Menu section of this documentation. This page focusses on some features of the CsoundQt Editor.","title":"Edit and Get Help"},{"location":"gs_edit/#code-completion","text":"When you type, for instance, the letters \"tab\", you will see different options for code completion: Choose one of them with the mouse or the arrow key. You have two choices now: \u2014 tab will only complete the opcode name; \u2014 return will also insert the arguments with the names found in the manual. Any of your own variable names will offer self-completion, too.","title":"Code completion"},{"location":"gs_edit/#access-to-the-csound-manual","text":"When you select any opcode (double-click on it), or have the cursor in it, you can get the corresponding page of the Canonical Csound Manual by selecting either Help > Shop Opcode Entry (or Shift+F1), or choose Opcode Help from the context menu (which you get by right-click on the opcode name). You can also find a short info about the opcode at the bottom of the Editor's panel.","title":"Access to the Csound Manual"},{"location":"gs_edit/#code-graph","text":"Select Examples > Getting Started > Toots > Toot 1 , and then View > View Code Graph . You should see this drawing: It is not perfect, but quite useful to show the signal flow for simple csd files. If it is not working, try to set the graphviz dot application in Configure > External Programs > Dot .","title":"Code Graph"},{"location":"gs_edit/#inspector","text":"When you click on the Inspector button (or View > Inspector ), you get a panel which is quite useful for extended Csound code: You can navigate easily to any part of the code, or in the score.","title":"Inspector"},{"location":"gs_edit/#split-view","text":"Instead of the usual raw-text mode, CsoundQt offers a split view for both, the orchestra and the score. Go to View > Split View , and you will see the score changed to a spread-sheet-like view, and the tags (CsOptions etc) disappeared. You can choose which sections to show or to hide:","title":"Split View"},{"location":"gs_edit/#recompile-evaluate-python-code","text":"Since Csound 6, it is possible to change any instrument definition while Csound is running. CsoundQt provides an easy way of recompiling. This be your Csound code: instr 1 schedkwhen metro(1), 0, 0, 2, 0, 1 endin instr 2 prints \"Hallo\\n\" endin schedule(1,0,1000) Run this code and change the print statement in instrument 2 from \"Hallo\\n\" to \"HalloHallo\\n\" or whatever. Nothing will happen, as Csound needs a command to recompile instrument 2. Now place the cursor anywhere in instrument 2, go to the Edit menu, and select Evaluate Section . You will see a message in the console: \"Csound code evaluated.\", and after this message you will see the new printout.","title":"Recompile / Evaluate Python Code"},{"location":"gs_examples/","text":"Examples CsoundQt offers a rich and diverse example collection in its Examples Menu: Useful We want to highlight here some essential examples which are useful to test the audio and MIDI connections. All are in the Examples > CsoundQt > Useful directory. Audio/Midi test This is an extended examples to test all functionality. It can also be started via the Configure panel: It somehow replaces three older tests for Audio Output, Audio Input and MIDI test which nevertheless can still be useful because of some features: Audio Output Test Audio Input Test MIDI IO Test IO Test As a simple example for stereo, this is still useful: Audio Thru Test This is useful to test the latency of your audio configuration. (You can adjust the buffer sizes in the Advanced Tab of CsoundQt's Configuration panel.) Other Examples There are two large example collections included in the example menu: Iain McCurdy's Realtime Examples which was originally created for FLTK widgets and has been translated for CsoundQt by Ren\u00e8. The examples from the Csound FLOSS Manual . Enjoy exploring these and many other examples. Feedback and suggestions for improvement are always welcome!","title":"Examples"},{"location":"gs_examples/#examples","text":"CsoundQt offers a rich and diverse example collection in its Examples Menu:","title":"Examples"},{"location":"gs_examples/#useful","text":"We want to highlight here some essential examples which are useful to test the audio and MIDI connections. All are in the Examples > CsoundQt > Useful directory.","title":"Useful"},{"location":"gs_examples/#audiomidi-test","text":"This is an extended examples to test all functionality. It can also be started via the Configure panel: It somehow replaces three older tests for Audio Output, Audio Input and MIDI test which nevertheless can still be useful because of some features:","title":"Audio/Midi test"},{"location":"gs_examples/#audio-output-test","text":"","title":"Audio Output Test"},{"location":"gs_examples/#audio-input-test","text":"","title":"Audio Input Test"},{"location":"gs_examples/#midi-io-test","text":"","title":"MIDI IO Test"},{"location":"gs_examples/#io-test","text":"As a simple example for stereo, this is still useful:","title":"IO Test"},{"location":"gs_examples/#audio-thru-test","text":"This is useful to test the latency of your audio configuration. (You can adjust the buffer sizes in the Advanced Tab of CsoundQt's Configuration panel.)","title":"Audio Thru Test"},{"location":"gs_examples/#other-examples","text":"There are two large example collections included in the example menu: Iain McCurdy's Realtime Examples which was originally created for FLTK widgets and has been translated for CsoundQt by Ren\u00e8. The examples from the Csound FLOSS Manual . Enjoy exploring these and many other examples. Feedback and suggestions for improvement are always welcome!","title":"Other Examples"},{"location":"gs_firstrun/","text":"First Run and Trouble Shooting After installing Csound and CsoundQt, start CsoundQt. You will see an editor with different tabs. Run Example Navigate to the Hello World example in the built-in Getting Started tutorial of CsoundQt: After this file is loaded, push the Run Csound button top left: You should now hear one second of a 440 Hz sine tone. Trouble Shooting But what if not? Some tips here; more later. Did you really install Csound first, and then CsoundQt? Otherwise CsoundQt can not call the Csound audio engine. Look at the console. (If it is not visible, go to View > Output Console .) Is there any error message which makes sense to you? Open the Configuration panel by clicking on the button in the toolbar. Look at the first tab which is called Run : In the Realtime Audio section, you should see an audio driver selected. If this field is empty, choose one from the pulldown menu. \"Portaudio\" should work for all platforms. The field Input device (-i) should usually be set to adc and Output device (-o) to dac as seen in the picture.","title":"First Run and Trouble Shooting"},{"location":"gs_firstrun/#first-run-and-trouble-shooting","text":"After installing Csound and CsoundQt, start CsoundQt. You will see an editor with different tabs.","title":"First Run and Trouble Shooting"},{"location":"gs_firstrun/#run-example","text":"Navigate to the Hello World example in the built-in Getting Started tutorial of CsoundQt: After this file is loaded, push the Run Csound button top left: You should now hear one second of a 440 Hz sine tone.","title":"Run Example"},{"location":"gs_firstrun/#trouble-shooting","text":"But what if not? Some tips here; more later. Did you really install Csound first, and then CsoundQt? Otherwise CsoundQt can not call the Csound audio engine. Look at the console. (If it is not visible, go to View > Output Console .) Is there any error message which makes sense to you? Open the Configuration panel by clicking on the button in the toolbar. Look at the first tab which is called Run : In the Realtime Audio section, you should see an audio driver selected. If this field is empty, choose one from the pulldown menu. \"Portaudio\" should work for all platforms. The field Input device (-i) should usually be set to adc and Output device (-o) to dac as seen in the picture.","title":"Trouble Shooting"},{"location":"gs_install/","text":"Installation Install Csound first! CsoundQt is not Csound. CsoundQt is a frontend for Csound. This means that you must install raw Csound first! Go to the Csound Download Page , choose the installer for your operating system, and install Csound. If you need more help, this how-to might be useful. Note: In some CsoundQt installers raw Csound is included. Look whether there is something like \" +Csound \" in the name, for instance CsoundQt-1.1.3+Csound-6.18.1-Wind64.zip . Mac Download the CsoundQt-[Version Number]-MacOS.dmg from the CsoundQt release page . NOTE: Choose the plain version (without \"pythonqt\") for normal use. Open the .dmg and drag the green CsoundQt application into the Applications folder. Windows Download the CsoundQt-[Version Number]-Win64.zip from the CsoundQt release page . Unzip the file. Go to the bin folder. Select and copy the whole content of the bin folder. Go to C: -> Program Files -> Csound6_x64 -> bin and paste all the copied files here. Send \"CsoundQt-d-html-cs6.exe\" from this folder as a shortcut to your desktop if you like. Linux CsoundQt binaries are in most of the package managers. These binaries might be built without RtMidi and/or without PythonQt support. If you need to work with it, you should build CsoundQt . Instructions can be found at https://github.com/CsoundQt/CsoundQt/wiki and in the BUILDING.md file in the sources.","title":"Installation"},{"location":"gs_install/#installation","text":"","title":"Installation"},{"location":"gs_install/#install-csound-first","text":"CsoundQt is not Csound. CsoundQt is a frontend for Csound. This means that you must install raw Csound first! Go to the Csound Download Page , choose the installer for your operating system, and install Csound. If you need more help, this how-to might be useful. Note: In some CsoundQt installers raw Csound is included. Look whether there is something like \" +Csound \" in the name, for instance CsoundQt-1.1.3+Csound-6.18.1-Wind64.zip .","title":"Install Csound first!"},{"location":"gs_install/#mac","text":"Download the CsoundQt-[Version Number]-MacOS.dmg from the CsoundQt release page . NOTE: Choose the plain version (without \"pythonqt\") for normal use. Open the .dmg and drag the green CsoundQt application into the Applications folder.","title":"Mac"},{"location":"gs_install/#windows","text":"Download the CsoundQt-[Version Number]-Win64.zip from the CsoundQt release page . Unzip the file. Go to the bin folder. Select and copy the whole content of the bin folder. Go to C: -> Program Files -> Csound6_x64 -> bin and paste all the copied files here. Send \"CsoundQt-d-html-cs6.exe\" from this folder as a shortcut to your desktop if you like.","title":"Windows"},{"location":"gs_install/#linux","text":"CsoundQt binaries are in most of the package managers. These binaries might be built without RtMidi and/or without PythonQt support. If you need to work with it, you should build CsoundQt . Instructions can be found at https://github.com/CsoundQt/CsoundQt/wiki and in the BUILDING.md file in the sources.","title":"Linux"},{"location":"gs_run/","text":"Run or Render-to-file CsoundQt offers different ways to run/render Csound code. When the Run button is pushed (or Control > Run Csound ), the current code is executed in real time. This means, the audio output is written to the soundcard (dac = digital-to-analog-converter), not to an audio file. You have any influence to the performance your code realizes, for instance by widgets or MIDI. When the Run in Term (= Run in Terminal) button is pushed, the code is also executed in real time, but as a subprocess in a Terminal. The main difference to 1) is, that any CsoundQt specific code will not work. In particular, widgets will have no effect at all. When the Render button is pushed, the code is rendered and the result is written to an audio file. You will hear nothing in real-time. The file name is taken from the setting in Configure > Run > File (offline render) > Output Filename (when checked). When the Record button is pushed, the code in executed in the same way as in 1), but additionally the real-time performance is recorded to an audio file. The file will be written to the same directory as the csd file is in, and will carry a similar name. It is also possible to toggle record on/of several times during the performance. CsoundQt will write seperate files for each time, record was on.","title":"Run or Render To File"},{"location":"gs_run/#run-or-render-to-file","text":"CsoundQt offers different ways to run/render Csound code. When the Run button is pushed (or Control > Run Csound ), the current code is executed in real time. This means, the audio output is written to the soundcard (dac = digital-to-analog-converter), not to an audio file. You have any influence to the performance your code realizes, for instance by widgets or MIDI. When the Run in Term (= Run in Terminal) button is pushed, the code is also executed in real time, but as a subprocess in a Terminal. The main difference to 1) is, that any CsoundQt specific code will not work. In particular, widgets will have no effect at all. When the Render button is pushed, the code is rendered and the result is written to an audio file. You will hear nothing in real-time. The file name is taken from the setting in Configure > Run > File (offline render) > Output Filename (when checked). When the Record button is pushed, the code in executed in the same way as in 1), but additionally the real-time performance is recorded to an audio file. The file will be written to the same directory as the csd file is in, and will carry a similar name. It is also possible to toggle record on/of several times during the performance. CsoundQt will write seperate files for each time, record was on.","title":"Run or Render-to-file"},{"location":"gs_widgets/","text":"Widgets CsoundQt offers a set of widgets to create a Graphical User Interface (GUI). Widgets can be used to show what happens in a real-time performance of Csound, or to control the performance itself. If CsoundQt is built with RtMidi, a widget can directly be connected with any MIDI controller. You will find a built-in documentation of the widget in CsoundQt's Examples > Widgets. It is recommended to read and click it in addition to the description here. How to Create a Widget Open the widget panel (push the \"Widgets\" button or go to View > Widgets) and right-click in it. You get a submenu: Choose a widget, for instance a SpinBox. You will get a new panel with the properties of the widget: x/y \u2014 absolute position in the panel in pixel Width/Height \u2014 size of the widget in pixel Min/Max \u2014 minimum/maximum number the widget can return Channel name \u2014 a name for the communication between Csound and a widget Resolution \u2014 the smallest resolution of the numbers (if set to 1, you will only get integers) Text \u2014 the current value (usually set by the user in real-time) Text Color / Background Color \u2014 clicking on these buttons opens a dialog for setting colors Edit and Play Mode Once you clicked OK, you will see the SpinBox in the widget panel. If you want to change the position, go to Edit > Widget Edit Mode (or Ctrl+E). If Edit Mode is on, you can move the widgets or change their size by dragging the right bottom corner. Like in PD or Max , you can toggle all the time between Edit and Play Mode. If you want to change any of the preferences, double-click on a widget in Edit Mode, or right-click on it in Play Mode (and choose Properties ). In Play Mode, you can change the widget values by the mouse and/or the computer keyboard. Note that a new value for the SpinBox will only be active when you hit the Return key. Get Values from a Widget Widgets communicate with Csound via a channel name. As shown above, you set the channel name in the widgets properties. Choose a meaningful name: You can receive the values from a widget via two opcodes: invalue or chnget . If the widget channel is \"frequency\" (you type it blank but it is a string), the lines of Csound code would be either kFreq invalue \"frequency\" or kFreq chnget \"frequency\" Most of the widgets return numbers, but some (LineEdit and Button) can return strings. In this case, the Csound code will be something like this: S_file invalue \"filename\" S_file chnget \"filename\" Whether you use invalue or chnget , is more or less up to your preferences. Both are slightly different implemented (have a look at the Csound Manual for details). For passing long strings to Csound, chnget is currently preferable. Also, the chnget/chnset system is much more efficient for CsoundQt files which use a lot of widgets. Remember to declare the channels in the header of your csd file, for instance: chn_S \"filename\", 3 chn_k \"frequency\", 3 In the widget's submenu you will find an item \"add chn_k to csd\" which does this job for you. This declaration is in particular necessary if you want to receive the current values of the widgets on startup. The k-Variables in Csound, which get the numbers of any widget, will usually be smoothed, to avoid jumps or sudden transitions (in particular for amplitudes). This can be done easily with the port opcode. This is a typical code: kDb invalue \"db\" ;receive dB value from a widget kDb port kDb, .1 ;smoothes the transitions out aSound * ampdb(kDb) ;applies as volume Reserved Channels There are some channels which carry some particular functionality. They all start with the underscore character. The first four are for Control/Transport (and usually have no receiver in the Csound code), whereas _Browse and _MBrowse will pass a string to Csound. _Play \u2014 If the value of this channel is 1, CsoundQt will play the current csd file (similar to pressing the Run button). _Pause \u2014 If the value of this channel is 1, CsoundQt will pause/resume the performance (= Pause button). _Stop \u2014 If the value of this channel is 1, CsoundQt will terminate the performance (= Stop button). _Render \u2014 If the value of this channel is 1, CsoundQt will render the current csd to an audio file (= Render button). _Browse \u2014 Use a button widget in the value mode. When a button is set to this channel, clicking on it (in Play Mode) will open a Select File dialog. You can choose here any file, and it will be saved in a string variable. You can also use this channel more than once by adding anything; for instance _Browse1 and _Browse2 will store two different file names. _MBrowse \u2014 The behaviour is similar to _Browse , but you can select here more than one file. Ths paths will be seperated by a | character. The following lines of Csound code show a possible result: chn_S \"_MBrowse\", 2 ;declares channel for input instr Receive_Filenames S_files chnget \"_MBrowse\" puts S_files, 1 endin -> /home/jh/Desktop/7chnls.aiff|/home/jh/Desktop/abend1.wav|/home/jh/Desktop/BratscheStereo.aiff|/home/jh/Desktop/chirp40-1300Hz.wav Presets A preset is another reserved channel. Its goal is to store and recall a widget snapshot. The most simple and intuitive way to store and recall presets is to right-click in the widget panel, and the choose Store Widget . There is also a build-in example: Examples > Widgets > Presets. Pass Values to a Widget Widgets can also be used to show values which are changing in Csound, as visual feedback for the user or performer. Any k-variable can be shown by many widgets, like sliders, displays or spin boxes. Just set the widget channel to any useful name, and insert either outvalue or chnset in the Csound code, for instance: kDb randomi -30, -10, 1/2, 3 outvalue \"db\", kDb chnset kDb, \"db\" Widget Types Overview This is a short description, followed by a screenshot from the buildin widget examples. Slider The standard widget, well known in all Audio GUIs. It can be either vertical or horizontal. Label A textbox for comments or similar. Display Can display any value from Csound (numbers or strings). ScrollNumber Number box whichs values are changed by mouse scrolling. LineEdit A text field which can be used either for user input (passed to Csound as a string), or display any string (for instance a file name which is received by the _Browse reserved channel). SpinBox A number box either for user input (via type/return or the scroll bar), or to show any Csound k-value. Button A button can either fire an event (trigger an instrument or create a function table), or pass a value when pushed. A latch option transforms a button to a toggle. Knob Similar functionality as slider, just different design. Checkbox Sends 1/0 if checked/unchecked. So the behaviour is actually the same as a button in latch mode. Menu Shows names, but returns numbers (starting from zero) for the different items. Controller A widget with many possibilities. Can be used as x/y pad, or as slider, or as signal display. Console Displays the output of the Csound console in a widget. Graph Displays Csound's function tables, and FFT analysis, too. Scope Displays Csound's audio output, and some more ... Virtual Keyboard This widget is not under the Create Widget submenu, as it is not part of the widget panel. It is created by pushing the Keyboard button, and pops up as independent panel. It can substitute an external MIDI keyboard. MIDI Integration If your CsoundQt has been compiled with RtMidi support, you can assign any MIDI controller directly to any widget. Just open the properties and type in MIDI channel and Controller Number, or use the MIDI Learn functionality.","title":"Widgets"},{"location":"gs_widgets/#widgets","text":"CsoundQt offers a set of widgets to create a Graphical User Interface (GUI). Widgets can be used to show what happens in a real-time performance of Csound, or to control the performance itself. If CsoundQt is built with RtMidi, a widget can directly be connected with any MIDI controller. You will find a built-in documentation of the widget in CsoundQt's Examples > Widgets. It is recommended to read and click it in addition to the description here.","title":"Widgets"},{"location":"gs_widgets/#how-to-create-a-widget","text":"Open the widget panel (push the \"Widgets\" button or go to View > Widgets) and right-click in it. You get a submenu: Choose a widget, for instance a SpinBox. You will get a new panel with the properties of the widget: x/y \u2014 absolute position in the panel in pixel Width/Height \u2014 size of the widget in pixel Min/Max \u2014 minimum/maximum number the widget can return Channel name \u2014 a name for the communication between Csound and a widget Resolution \u2014 the smallest resolution of the numbers (if set to 1, you will only get integers) Text \u2014 the current value (usually set by the user in real-time) Text Color / Background Color \u2014 clicking on these buttons opens a dialog for setting colors","title":"How to Create a Widget"},{"location":"gs_widgets/#edit-and-play-mode","text":"Once you clicked OK, you will see the SpinBox in the widget panel. If you want to change the position, go to Edit > Widget Edit Mode (or Ctrl+E). If Edit Mode is on, you can move the widgets or change their size by dragging the right bottom corner. Like in PD or Max , you can toggle all the time between Edit and Play Mode. If you want to change any of the preferences, double-click on a widget in Edit Mode, or right-click on it in Play Mode (and choose Properties ). In Play Mode, you can change the widget values by the mouse and/or the computer keyboard. Note that a new value for the SpinBox will only be active when you hit the Return key.","title":"Edit and Play Mode"},{"location":"gs_widgets/#get-values-from-a-widget","text":"Widgets communicate with Csound via a channel name. As shown above, you set the channel name in the widgets properties. Choose a meaningful name: You can receive the values from a widget via two opcodes: invalue or chnget . If the widget channel is \"frequency\" (you type it blank but it is a string), the lines of Csound code would be either kFreq invalue \"frequency\" or kFreq chnget \"frequency\" Most of the widgets return numbers, but some (LineEdit and Button) can return strings. In this case, the Csound code will be something like this: S_file invalue \"filename\" S_file chnget \"filename\" Whether you use invalue or chnget , is more or less up to your preferences. Both are slightly different implemented (have a look at the Csound Manual for details). For passing long strings to Csound, chnget is currently preferable. Also, the chnget/chnset system is much more efficient for CsoundQt files which use a lot of widgets. Remember to declare the channels in the header of your csd file, for instance: chn_S \"filename\", 3 chn_k \"frequency\", 3 In the widget's submenu you will find an item \"add chn_k to csd\" which does this job for you. This declaration is in particular necessary if you want to receive the current values of the widgets on startup. The k-Variables in Csound, which get the numbers of any widget, will usually be smoothed, to avoid jumps or sudden transitions (in particular for amplitudes). This can be done easily with the port opcode. This is a typical code: kDb invalue \"db\" ;receive dB value from a widget kDb port kDb, .1 ;smoothes the transitions out aSound * ampdb(kDb) ;applies as volume","title":"Get Values from a Widget"},{"location":"gs_widgets/#reserved-channels","text":"There are some channels which carry some particular functionality. They all start with the underscore character. The first four are for Control/Transport (and usually have no receiver in the Csound code), whereas _Browse and _MBrowse will pass a string to Csound. _Play \u2014 If the value of this channel is 1, CsoundQt will play the current csd file (similar to pressing the Run button). _Pause \u2014 If the value of this channel is 1, CsoundQt will pause/resume the performance (= Pause button). _Stop \u2014 If the value of this channel is 1, CsoundQt will terminate the performance (= Stop button). _Render \u2014 If the value of this channel is 1, CsoundQt will render the current csd to an audio file (= Render button). _Browse \u2014 Use a button widget in the value mode. When a button is set to this channel, clicking on it (in Play Mode) will open a Select File dialog. You can choose here any file, and it will be saved in a string variable. You can also use this channel more than once by adding anything; for instance _Browse1 and _Browse2 will store two different file names. _MBrowse \u2014 The behaviour is similar to _Browse , but you can select here more than one file. Ths paths will be seperated by a | character. The following lines of Csound code show a possible result: chn_S \"_MBrowse\", 2 ;declares channel for input instr Receive_Filenames S_files chnget \"_MBrowse\" puts S_files, 1 endin -> /home/jh/Desktop/7chnls.aiff|/home/jh/Desktop/abend1.wav|/home/jh/Desktop/BratscheStereo.aiff|/home/jh/Desktop/chirp40-1300Hz.wav","title":"Reserved Channels"},{"location":"gs_widgets/#presets","text":"A preset is another reserved channel. Its goal is to store and recall a widget snapshot. The most simple and intuitive way to store and recall presets is to right-click in the widget panel, and the choose Store Widget . There is also a build-in example: Examples > Widgets > Presets.","title":"Presets"},{"location":"gs_widgets/#pass-values-to-a-widget","text":"Widgets can also be used to show values which are changing in Csound, as visual feedback for the user or performer. Any k-variable can be shown by many widgets, like sliders, displays or spin boxes. Just set the widget channel to any useful name, and insert either outvalue or chnset in the Csound code, for instance: kDb randomi -30, -10, 1/2, 3 outvalue \"db\", kDb chnset kDb, \"db\"","title":"Pass Values to a Widget"},{"location":"gs_widgets/#widget-types-overview","text":"This is a short description, followed by a screenshot from the buildin widget examples.","title":"Widget Types Overview"},{"location":"gs_widgets/#slider","text":"The standard widget, well known in all Audio GUIs. It can be either vertical or horizontal.","title":"Slider"},{"location":"gs_widgets/#label","text":"A textbox for comments or similar.","title":"Label"},{"location":"gs_widgets/#display","text":"Can display any value from Csound (numbers or strings).","title":"Display"},{"location":"gs_widgets/#scrollnumber","text":"Number box whichs values are changed by mouse scrolling.","title":"ScrollNumber"},{"location":"gs_widgets/#lineedit","text":"A text field which can be used either for user input (passed to Csound as a string), or display any string (for instance a file name which is received by the _Browse reserved channel).","title":"LineEdit"},{"location":"gs_widgets/#spinbox","text":"A number box either for user input (via type/return or the scroll bar), or to show any Csound k-value.","title":"SpinBox"},{"location":"gs_widgets/#button","text":"A button can either fire an event (trigger an instrument or create a function table), or pass a value when pushed. A latch option transforms a button to a toggle.","title":"Button"},{"location":"gs_widgets/#knob","text":"Similar functionality as slider, just different design.","title":"Knob"},{"location":"gs_widgets/#checkbox","text":"Sends 1/0 if checked/unchecked. So the behaviour is actually the same as a button in latch mode.","title":"Checkbox"},{"location":"gs_widgets/#menu","text":"Shows names, but returns numbers (starting from zero) for the different items.","title":"Menu"},{"location":"gs_widgets/#controller","text":"A widget with many possibilities. Can be used as x/y pad, or as slider, or as signal display.","title":"Controller"},{"location":"gs_widgets/#console","text":"Displays the output of the Csound console in a widget.","title":"Console"},{"location":"gs_widgets/#graph","text":"Displays Csound's function tables, and FFT analysis, too.","title":"Graph"},{"location":"gs_widgets/#scope","text":"Displays Csound's audio output, and some more ...","title":"Scope"},{"location":"gs_widgets/#virtual-keyboard","text":"This widget is not under the Create Widget submenu, as it is not part of the widget panel. It is created by pushing the Keyboard button, and pops up as independent panel. It can substitute an external MIDI keyboard.","title":"Virtual Keyboard"},{"location":"gs_widgets/#midi-integration","text":"If your CsoundQt has been compiled with RtMidi support, you can assign any MIDI controller directly to any widget. Just open the properties and type in MIDI channel and Controller Number, or use the MIDI Learn functionality.","title":"MIDI Integration"},{"location":"html5/","text":"HTML5 Support It is possible to use any html5 code inside your CSD file in CsoundQt. This code must be enclosed in a tag called html . Have a look at the Minimal html5 example to see how it works:","title":"HTML5 Support"},{"location":"html5/#html5-support","text":"It is possible to use any html5 code inside your CSD file in CsoundQt. This code must be enclosed in a tag called html . Have a look at the Minimal html5 example to see how it works:","title":"HTML5 Support"},{"location":"menu/","text":"CsoundQt Menu Items (On OS X, substitute CTRL key for COMMAND key and ALT for OPTION key.) The key shortcuts can be changed in Edit > Set keyboard shortcuts File New ( CTRL+N ) Create new untitled file Open ( CTRL+O ) Open existing file Save ( CTRL+S ) Save current file Save as ( CTRL+SHIFT+S ) Save current file as a different file Export without widgets Save current file as a different file without the widget section Reload Revert file to last saved version Insert/Update Cabbage text Close current tab ( CTRL+W ) Close current file Print ( CTRL+P ) Print current file File Information Display information about current file Recent files List recently opened files Templates Select a file from Templates folder Exit ( CTRL+Q ) Exit CsoundQt Edit Undo ( CTRL+Z ) Undo last change Redo ( CTRL+SHIFT+Z ) Redo change Cut ( CTRL+X ) Cut selected text Copy ( CTRL+C ) Copy selected text to clipboard Paste ( CTRL+V ) Paste clipboard in current cursor position Evaluate Selection ( CTRL+SHIFT+W ) Evaluate selected code Evaluate Section ( SHIFT+CTRL+E ) Evaluate code section Code Pad in Csound Mode ( SHIFT+ALT+S ) Toggle Code Pad from Csound to Python mode Find and replace ( CTRL+F ) Open find-and-replace dialog Find again Repeat last search Comment/Uncomment ( CTRL+/ ) Comment / Uncomment selected text (add / remove ';' character before each line) Indent ( CTRL+I ) Insert tab at current line / selection Kill line ( CTRL+K ) Remove current line Kill to End of Line ( ALT+SHIFT+K ) Remove text from cursor to end of line Show/hide line number area ( ALT+SHIFT+K ) Show / hide line numbers in editor Toggle parameter mode ( ALT+SHIFT+P ) Toggle between different modes of code completion Join orc/sco Opens dialog for joining open orc and sco files into a new csd file Invalue->chnget Convert lines with \u201cinvalue\u201d to \u201cchnget\u201d Chnget->invalue Convert lines with \u201cchnget\u201d to \u201cinvalue\u201d Insert/Update CsLADSPA text Insert a section or update it Insert/Update Cabbage text Insert a section or update it Widget edit mode ( CTRL+E ) Turn widget edit mode on/off Configuration Open configuration panel Set keyboard shortcuts Change / set / restore keyboard shortcuts Control Run Csound ( CTRL+R ) Run current csd file in realtime to sound card Run in Terminal ( CTRL+SHIFT+R ) Run current csd in external shell Pause Pause / resume execution Render to file ( ALT+F ) Run current csd and write to disk Record ( CTRL+SPACE ) Run current csd in realtime and record Csound's audio output to disk Stop ( ALT+S ) Terminate execution of current csd Stop All ( ALT+. ) Terminate all running csd tabs Edit AudioFile Edit last audio file in external editor Play Audiofile Play generated audio file in external player View Focus Text Editor ( ALT+0 ) Focus to the CsoundQt editor Widgets ( ALT+1 ) Toggle Widget Panel visibility Help Panel ( ALT+2 ) Toggle Help Panel visibility Output Console ( ALT+3 ) Toggle Output console Panel visibility View Code Graph ( ALT+4 ) Shows code as flow chart Inspector ( ALT+5 ) Toggle Inspector Panel visibility Live events ( ALT+6 ) Toggle Live Events Sheet visibility Python console ( ALT+7 ) Toggle Python console visibility Code pad ( ALT+8 ) Toggle Code pad visibility Utilities ( ALT+9 ) Open Utilities dialog View Full Screen Toggle full screen view Split View ( CRTL+SHIFT+A ) Toggle split view of instruments, score, and optional other sections Examples Getting Started Basic examples and built-in tutorials FLOSS Manual Examples All examples from the Csound FLOSS Manual McCurdy Collection Many of Iain McCurdy's Realtime Examples converted to CsoundQt by Ren\u00e9 Live Collection Examples with live audio input Widgets Characteristics and usage of CsoundQt's widgets Synths Different synthesizer implementations Music Musical pieces written in or converted to Csound Useful Audio / MIDI tester and other useful stuff Miscellaneous Various examples Favorites Direct access to any folder which is set in Configure > Environment > Favorite dir Scripts This menu is only available when CsoundQt is compiled with Python support. It will then provide a collection of Python scripts which to control CsoundQt via the Python programming language. Help Show opcode entry ( SHIFT+F1 ) Show opcode entry for opcode under cursor or selected in Help Panel Show opcode entry in external browser ( ALT+SHIFT+F1 ) Opens opcode entry for opcode under cursor or selected in external browser Help Back ( CTRL+LEFT ARROW ) Go back in help browser history Help Forward ( CTRL+RIGHT ARROW ) Go forward in help browser history Csound Manual Show the Csound Manual Download Csound Manual Open browser and load a page to download the Csound Manual Opcode Overview Show opcode overview in help panel Opcode Quick Reference Show ordered short reference of all Csound opcodes GEN Routines Show GEN Routines overview Open Quick Reference Guide Open this documnt as pdf Reset Preferences Reset all CsoundQt preferences (should be used with caution in case of bugs due to wrong preference settings) Report a Bug Direct access to bug report (for CsoundQt, not Csound) Request a Feature Direct access to feature request (for CsoundQt) Csound IRC Chat Join Csound's IRC chat About CsoundQt Info and links Donate to CsoundQt Free speech and free beer both need some support Context (Right mouse click in text area) Undo ( U ) Undo last edit Redo ( R ) Redo last edit Cut ( T ) Cut selection Copy ( C ) Copy selection Paste ( P ) Paste selection Delete Delete selection Select All Select all text in editor Evaluate Selection Evaluate selected text Opcode Help Show opcode entry for opcode under cursor or selected in Help Panel Show/hide line numbers Toggle line number view Opcodes Selection of opcodes by category","title":"CsoundQt Menu Items"},{"location":"menu/#csoundqt-menu-items","text":"(On OS X, substitute CTRL key for COMMAND key and ALT for OPTION key.) The key shortcuts can be changed in Edit > Set keyboard shortcuts","title":"CsoundQt Menu Items"},{"location":"menu/#file","text":"New ( CTRL+N ) Create new untitled file Open ( CTRL+O ) Open existing file Save ( CTRL+S ) Save current file Save as ( CTRL+SHIFT+S ) Save current file as a different file Export without widgets Save current file as a different file without the widget section Reload Revert file to last saved version Insert/Update Cabbage text Close current tab ( CTRL+W ) Close current file Print ( CTRL+P ) Print current file File Information Display information about current file Recent files List recently opened files Templates Select a file from Templates folder Exit ( CTRL+Q ) Exit CsoundQt","title":"File"},{"location":"menu/#edit","text":"Undo ( CTRL+Z ) Undo last change Redo ( CTRL+SHIFT+Z ) Redo change Cut ( CTRL+X ) Cut selected text Copy ( CTRL+C ) Copy selected text to clipboard Paste ( CTRL+V ) Paste clipboard in current cursor position Evaluate Selection ( CTRL+SHIFT+W ) Evaluate selected code Evaluate Section ( SHIFT+CTRL+E ) Evaluate code section Code Pad in Csound Mode ( SHIFT+ALT+S ) Toggle Code Pad from Csound to Python mode Find and replace ( CTRL+F ) Open find-and-replace dialog Find again Repeat last search Comment/Uncomment ( CTRL+/ ) Comment / Uncomment selected text (add / remove ';' character before each line) Indent ( CTRL+I ) Insert tab at current line / selection Kill line ( CTRL+K ) Remove current line Kill to End of Line ( ALT+SHIFT+K ) Remove text from cursor to end of line Show/hide line number area ( ALT+SHIFT+K ) Show / hide line numbers in editor Toggle parameter mode ( ALT+SHIFT+P ) Toggle between different modes of code completion Join orc/sco Opens dialog for joining open orc and sco files into a new csd file Invalue->chnget Convert lines with \u201cinvalue\u201d to \u201cchnget\u201d Chnget->invalue Convert lines with \u201cchnget\u201d to \u201cinvalue\u201d Insert/Update CsLADSPA text Insert a section or update it Insert/Update Cabbage text Insert a section or update it Widget edit mode ( CTRL+E ) Turn widget edit mode on/off Configuration Open configuration panel Set keyboard shortcuts Change / set / restore keyboard shortcuts","title":"Edit"},{"location":"menu/#control","text":"Run Csound ( CTRL+R ) Run current csd file in realtime to sound card Run in Terminal ( CTRL+SHIFT+R ) Run current csd in external shell Pause Pause / resume execution Render to file ( ALT+F ) Run current csd and write to disk Record ( CTRL+SPACE ) Run current csd in realtime and record Csound's audio output to disk Stop ( ALT+S ) Terminate execution of current csd Stop All ( ALT+. ) Terminate all running csd tabs Edit AudioFile Edit last audio file in external editor Play Audiofile Play generated audio file in external player","title":"Control"},{"location":"menu/#view","text":"Focus Text Editor ( ALT+0 ) Focus to the CsoundQt editor Widgets ( ALT+1 ) Toggle Widget Panel visibility Help Panel ( ALT+2 ) Toggle Help Panel visibility Output Console ( ALT+3 ) Toggle Output console Panel visibility View Code Graph ( ALT+4 ) Shows code as flow chart Inspector ( ALT+5 ) Toggle Inspector Panel visibility Live events ( ALT+6 ) Toggle Live Events Sheet visibility Python console ( ALT+7 ) Toggle Python console visibility Code pad ( ALT+8 ) Toggle Code pad visibility Utilities ( ALT+9 ) Open Utilities dialog View Full Screen Toggle full screen view Split View ( CRTL+SHIFT+A ) Toggle split view of instruments, score, and optional other sections","title":"View"},{"location":"menu/#examples","text":"Getting Started Basic examples and built-in tutorials FLOSS Manual Examples All examples from the Csound FLOSS Manual McCurdy Collection Many of Iain McCurdy's Realtime Examples converted to CsoundQt by Ren\u00e9 Live Collection Examples with live audio input Widgets Characteristics and usage of CsoundQt's widgets Synths Different synthesizer implementations Music Musical pieces written in or converted to Csound Useful Audio / MIDI tester and other useful stuff Miscellaneous Various examples","title":"Examples"},{"location":"menu/#favorites","text":"Direct access to any folder which is set in Configure > Environment > Favorite dir","title":"Favorites"},{"location":"menu/#scripts","text":"This menu is only available when CsoundQt is compiled with Python support. It will then provide a collection of Python scripts which to control CsoundQt via the Python programming language.","title":"Scripts"},{"location":"menu/#help","text":"Show opcode entry ( SHIFT+F1 ) Show opcode entry for opcode under cursor or selected in Help Panel Show opcode entry in external browser ( ALT+SHIFT+F1 ) Opens opcode entry for opcode under cursor or selected in external browser Help Back ( CTRL+LEFT ARROW ) Go back in help browser history Help Forward ( CTRL+RIGHT ARROW ) Go forward in help browser history Csound Manual Show the Csound Manual Download Csound Manual Open browser and load a page to download the Csound Manual Opcode Overview Show opcode overview in help panel Opcode Quick Reference Show ordered short reference of all Csound opcodes GEN Routines Show GEN Routines overview Open Quick Reference Guide Open this documnt as pdf Reset Preferences Reset all CsoundQt preferences (should be used with caution in case of bugs due to wrong preference settings) Report a Bug Direct access to bug report (for CsoundQt, not Csound) Request a Feature Direct access to feature request (for CsoundQt) Csound IRC Chat Join Csound's IRC chat About CsoundQt Info and links Donate to CsoundQt Free speech and free beer both need some support","title":"Help"},{"location":"menu/#context","text":"(Right mouse click in text area) Undo ( U ) Undo last edit Redo ( R ) Redo last edit Cut ( T ) Cut selection Copy ( C ) Copy selection Paste ( P ) Paste selection Delete Delete selection Select All Select all text in editor Evaluate Selection Evaluate selected text Opcode Help Show opcode entry for opcode under cursor or selected in Help Panel Show/hide line numbers Toggle line number view Opcodes Selection of opcodes by category","title":"Context"},{"location":"pythonqt/","text":"PythonQt If CsoundQt is built with PythonQt support, it enables a lot of new possibilities, mostly in three main fields: interaction with the CsoundQt interface, interaction with widgets and using classes from Qt libraries to build custom interfaces in python. If you start CsoundQt and can open the panels \"Python Console\" and \"Python Scratch Pad\", you are ready to go. The CsoundQt Python Object As CsoundQt has formerly been called QuteCsound, this name can still be found in the sources. The QuteCsound object (called PyQcsObject in the sources) is the interface for scripting CsoundQt. All declarations of the class can be found in the file pyqcsobject.h in the sources. It enables the control of a large part of CsoundQt's possibilities from the python interpreter, the python scratchpad, from scripts or from inside of a running Csound file via Csound's python opcodes. By default, a PyQcsObject is already available in the python interpreter of CsoundQt called \u201cq\u201d. To use any of its methods, use form like q.stopAll() The methods can be divided into four groups: access CsoundQt's interface (open or close files, start or stop performance etc) edit Csound files which has already been opened as tabs in CsoundQt manage CsoundQt's widgets interface with the running Csound engine File and Control Access If you have CsoundQt running on your computer, you should type the following code examples in the Python Console (if only one line) or the Python Scratch Pad (if more than one line of code). Create or Load a csd File Type q.newDocument('cs_floss_1.csd') in your Python Console and hit the Return key. This will create a new csd file named \"cs_floss_1.csd\" in your working directory. And it also returns an integer (in the screenshot below: 3) as index for this file. If you close this file and then execute the line q.loadDocument('cs_floss_1.csd') , you should see the file again as tab in CsoundQt. Let us have a look how these two methods newDocument and loadDocument are described in the sources: int newDocument(QString name) int loadDocument(QString name, bool runNow = false) The method newDocument needs a name as string (\"QString\") as argument, and returns an integer. The method loadDocument also takes a name as input string and returns an integer as index for this csd. The additional argument runNow is optional. It expects a boolean value (True/False or 1/0). The default is \"false\" which means \"do not run immediately after loading\". So if you type instead q.loadDocument('cs_floss_1.csd', True) or q.loadDocument('cs_floss_1.csd', 1) , the csd file should start immediately. Run, Pause or Stop a csd File For the next methods, we first need some more code in our csd. So let your \"cs_floss_1.csd\" look like this: <CsoundSynthesizer> <CsOptions> </CsOptions> <CsInstruments> sr = 44100 ksmps = 32 0dbfs = 1 nchnls = 1 giSine ftgen 0, 0, 1024, 10, 1 instr 1 kPitch expseg 500, p3, 1000 aSine poscil .2, kPitch, giSine out aSine endin </CsInstruments> <CsScore> i 1 0 10 </CsScore> </CsoundSynthesizer> This instrument performs a simple pitch glissando from 500 to 1000 Hz in ten seconds. Now make sure that this csd is the currently active tab in CsoundQt, and execute this: q.play() This starts the performance. If you do nothing, the performance will stop after ten seconds. If you type instead after some seconds q.pause() the performance will pause. The same task q.pause() will resume the performance. Note that this is different from executing q.play() after q.pause() ; this will start a new performance. With q.stop() you can stop the current performance. Access to Different csd Tabs via Indices The play() , pause() and stop() method, as well as other methods in CsoundQt's integrated Python, allow also to access csd file tabs which are not currently active. As we saw in the creation of a new csd file by q.newDocument('cs_floss_1.csd') , each of them gets an index. This index allows universal access to all csd files in a running CsoundQt instance. First, create a new file \"cs_floss_2.csd\", for instance with this code: <CsoundSynthesizer> <CsOptions> </CsOptions> <CsInstruments> sr = 44100 ksmps = 32 0dbfs = 1 nchnls = 1 giSine ftgen 0, 0, 1024, 10, 1 instr 1 kPitch expseg 500, p3, 1000 aSine poscil .2, kPitch, giSine out aSine endin </CsInstruments> <CsScore> i 1 0 10 </CsScore> </CsoundSynthesizer> Now get the index of these two tabs in executing q.getDocument('cs_floss_1.csd') resp. q.getDocument('cs_floss_2.csd') . This will show something like this: So in my case the indices are 3 and 4.5 Now you can start, pause and stop any of these files with tasks like these: q.play(3) q.play(4) q.stop(3) q.stop(4) If you have checked \"Allow simultaneous play\" in CsoundQt's Configure->General ... .. you should be able to run both csds simultaneously. To stop all running files, use: q.stopAll() To set a csd as active, use setDocument(index) . This will have the same effect as clicking on the tab. Send Score Events Now comment out the score line in the file \"cs_floss_2.csd\", or simply remove it. When you now start Csound, this tab should run. Now execute this command: q.sendEvent('i 1 0 2') This should trigger instrument 1 for two seconds. Query File Name or Path In case you need to know the name or the path of a csd file, you have these functions: getFileName() getFilePath() Calling the method without any arguments, it refers to the currently active csd. An index as argument links to a specific tab. Here is a Python code snippet which returns indices, file names and file paths of all tabs in CsoundQt: index = 0 while q.getFileName(index): print 'index = %d' % index print ' File Name = %s' % q.getFileName(index) print ' File Path = %s' % q.getFilePath(index) index += 1 Which returns for instance: index = 0 File Name = /home/jh/Joachim/Stuecke/30Carin/csound/130328.csd File Path = /home/jh/Joachim/Stuecke/30Carin/csound index = 1 File Name = /home/jh/src/csoundmanual/examples/transegr.csd File Path = /home/jh/src/csoundmanual/examples index = 2 File Name = /home/jh/Arbeitsfl\u00e4che/test.csd File Path = /home/jh/Arbeitsfl\u00e4che index = 3 File Name = /home/jh/Joachim/Csound/FLOSS/Release03/Chapter_12C_PythonInCsoundQt/cs_floss_1.csd File Path = /home/jh/Joachim/Csound/FLOSS/Release03/Chapter_12C_PythonInCsoundQt index = 4 File Name = /home/jh/Joachim/Csound/FLOSS/Release03/Chapter_12C_PythonInCsoundQt/cs_floss_2.csd File Path = /home/jh/Joachim/Csound/FLOSS/Release03/Chapter_12C_PythonInCsoundQt Get and Set csd Text One of the main features of Python scripting in CsoundQt is the ability to edit any section of a csd file. There are several \"get\" functions, to query text, and also \"set\" functions to change or insert text. Get Text from a csd File Make sure your \"cs_floss_2.csd\" is the active tab, and execute the following python code lines: q.getCsd() q.getOrc() q.getSco() The q.getOrc() task should return this: u'\\nsr = 44100\\nksmps = 32\\n0dbfs = 1\\nnchnls = 1\\n\\ngiSine ftgen 0, 0, 1024, 10, 1\\n\\ninstr 1\\nkPitch expseg 1000, p3, 500\\naSine poscil .2, kPitch, giSine\\n out aSine\\nendin\\n' The u'...' indicates that a unicode string is returned. As usual in format expressions, newlines are indicated with the '\\n' formatter. You can also get the text for the CsOptions , the text for CsoundQt's widgets and presets, or the full text of this csd: getOptionsText() getWidgetsText() getPresetsText()getCsd() getFullText() If you select some text or some widgets, you will get the selection with these commands: getSelectedText() getSelectedWidgetsText() As usual, you can specify any of the loaded csds via its index. So calling q.getOrc(3) instead of q.getOrc() will return the orc text of the csd with index 3, instead of the orc text of the currently active csd. Set Text in a csd File Set the cursor anywhere in your active csd, and execute the following line in the Python Console: q.insertText('my nice insertion') You will see your nice insertion in the csd file. In case you do not like it, you can choose Edit->Undo. It does not make a difference for the CsoundQt editor whether the text has been typed by hand, or by the internal Python script facility. Text can also be inserted to individual sections using the functions: setCsd(text) setFullText(text) setOrc(text) setSco(text) setWidgetsText(text) setPresetsText(text) setOptionsText(text) Note that the whole section will be overwritten with the string text. Opcode Exists You can ask whether a string is an opcode name, or not, with the function opcodeExtists, for instance: py> q.opcodeExists('line') True py> q.opcodeExists('OSCsend') True py> q.opcodeExists('Line') False py> q.opcodeExists('Joe') NotYet Example: Score Generation A typical application for setting text in a csd is to generate a score. There have been numerous tools and programs to do this, and it can be very pleasant to use CsoundQt's Python scripting for this task. Let us modify our previous instrument first to make it more flexible: <CsoundSynthesizer> <CsOptions> </CsOptions> <CsInstruments> sr = 44100 ksmps = 32 0dbfs = 1 nchnls = 1 giSine ftgen 0, 0, 1024, 10, 1 instr 1 iOctStart = p4 ;pitch in octave notation at start iOctEnd = p5 ;and end iDbStart = p6 ;dB at start iDbEnd = p7 ;and end kPitch expseg cpsoct(iOctStart), p3, cpsoct(iOctEnd) kEnv linseg iDbStart, p3, iDbEnd aSine poscil ampdb(kEnv), kPitch, giSine iFad random p3/20, p3/5 aOut linen aSine, iFad, p3, iFad out aOut endin </CsInstruments> <CsScore> i 1 0 10 ;will be overwritten by the python score generator </CsScore> </CsoundSynthesizer> The following code will now insert 30 score events in the score section: from random import uniform numScoEvents = 30 sco = '' for ScoEvent in range(numScoEvents): start = uniform(0, 40) dur = 2**uniform(-5, 3) db1, db2 = [uniform(-36, -12) for x in range(2)] oct1, oct2 = [uniform(6, 10) for x in range(2)] scoLine = 'i 1 %f %f %f %f %d %d\\n' % (start, dur, oct1, oct2, db1, db2) sco = sco + scoLine q.setSco(sco) This generates a texture with either falling or rising gliding pitches. The durations are set in a way that shorter durations are more frequently than larger ones. The volume and pitch ranges allow many variations in the simple shape. Widgets Creating a Label Click on the \"Widgets\" button to see the widgets panel. Then execute this command in the Python Console: q.createNewLabel() The properties dialog of the label pops up. Type \"Hello Label!\" or something like this as text. When you click \"Ok\", you will see the label widget in the panel, and a strange unicode string as return value in the Python Console: The string u'{3a171aa2-4cf8-4f05-9f30-172863909f56}' is a \"universally unique identifier\" (uuid). Each widget can be accessed by this ID. Specifying the Common Properties as Arguments Instead of having a live talk with the properties dialog, we can specify all properties as arguments for the createNewLabel method: q.createNewLabel(200, 100, \"second_label\") This should be the result: A new label has been created\u2014without opening the properties dialog\u2014at position x=200 y=1008 with the name \"second_label\". If you want to create a widget not in the active document, but in another tab, you can also specify the tab index. This command will create a widget at the same position and with the same name in the first tab: q.createNewLabel(200, 100, \"second_label\", 0) Setting the Specific Properties Each widget has a xy position and a channel name. But the other properties depend on the type of widget. A Display has name, width and height, but no resolution like a SpinBox. The function setWidgetProperty refers to a widget via its ID and sets a property. Let us try this for a Display widget. This command creates a Display widget with channel name \"disp_chan_01\" at position x=50 y=150: q.createNewDisplay(50, 150, \"disp_chan_01\") And this sets the text to a new string: q.setWidgetProperty(\"disp_chan_01\", \"QCS_label\", \"Hey Joe!\") The setWidgetProperty method needs the ID of a widget first. This can be expressed either as channel name (\"disp_chan_01\") as in the command above, or as uuid. As I got the string u'{a71c0c67-3d54-4d4a-88e6-8df40070a7f5}' as uuid, I can also write: q.setWidgetProperty(u'{a71c0c67-3d54-4d4a-88e6-8df40070a7f5}', \"QCS_label\", \"Hey Joeboe!\") For humans, referring to the channel name as ID is probably preferable ... - But as the createNew... method returns the uuid, you can use it implicitely, for instance in this command: q.setWidgetProperty(q.createNewLabel(70, 70, \"WOW\"), \"QCS_fontsize\", 18) Getting the Property Names and Values You may have asked how to know that the visible text of a Display widget is called \"QCS_label\" and the fontsize \"QCS_fontsize\". If you do not know the name of a property, ask CsoundQt for it via the function listWidgetProperties : py> q.listWidgetProperties(\"disp_chan_01\") (u'QCS_x', u'QCS_y', u'QCS_uuid', u'QCS_visible', u'QCS_midichan', u'QCS_midicc', u'QCS_label', u'QCS_alignment', u'QCS_precision', u'QCS_font', u'QCS_fontsize', u'QCS_bgcolor', u'QCS_bgcolormode', u'QCS_color', u'QCS_bordermode', u'QCS_borderradius', u'QCS_borderwidth', u'QCS_width', u'QCS_height', u'QCS_objectName') As you see, listWidgetProperties returns all properties in a tuple. You can query the value of a single property with the function getWidgetProperty, which takes the uuid and the property as inputs, and returns the property value. So this code snippet asks for all property values of our Display widget: widgetID = \"disp_chan_01\" properties = q.listWidgetProperties(widgetID) for property in properties: propVal = q.getWidgetProperty(widgetID, property) print property + ' = ' + str(propVal) Returns: QCS_x = 50 QCS_y = 150 QCS_uuid = {a71c0c67-3d54-4d4a-88e6-8df40070a7f5} QCS_visible = True QCS_midichan = 0 QCS_midicc = -3 QCS_label = Hey Joeboe! QCS_alignment = left QCS_precision = 3 QCS_font = Arial QCS_fontsize = 10 QCS_bgcolor = #ffffff QCS_bgcolormode = False QCS_color = #000000 QCS_bordermode = border QCS_borderradius = 1 QCS_borderwidth = 1 QCS_width = 80 QCS_height = 25 QCS_objectName = disp_chan_01 Get the UUIDs of all Widgets For getting the uuid strings of all widgets in the active csd tab, type q.getWidgetUuids() As always, the uuid strings of other csd tabs can be accessed via the index. Some Examples for Creating and Modifying Widgets Create a new slider with the channel name \"level\" at position 10,10 in the (already open but not necessarily active) document \"test.csd\": q.createNewSlider(10, 10, \"level\", q.getDocument(\"test.csd\")) Create ten knobs with the channel names \"partial_1\", \"partial_2\" etc, and the according labels \"amp_part_1\", \"amp_part_2\" etc in the currently active document: for no in range(10): q.createNewKnob(100*no, 5, \"partial_\"+str(no+1)) q.createNewLabel(100*no+5, 90, \"amp_part_\"+str(no+1)) Alternatively, you can store the uuid strings while creating: knobs, labels = [], [] for no in range(10): knobs.append(q.createNewKnob(100*no, 5, \"partial_\"+str(no+1))) labels.append(q.createNewLabel(100*no+5, 90, \"amp_part_\"+str(no+1))) The variables knobs and labels now contain the IDs: py> knobs [u'{8d10f9e3-70ce-4953-94b5-24cf8d6f6adb}', u'{d1c98b52-a0a1-4f48-9bca-bac55dad0de7}', u'{b7bf4b76-baff-493f-bc1f-43d61c4318ac}', u'{1332208d-e479-4152-85a8-0f4e6e589d9d}', u'{428cc329-df4a-4d04-9cea-9be3e3c2a41c}', u'{1e691299-3e24-46cc-a3b6-85fdd40eac15}', u'{a93c2b27-89a8-41b2-befb-6768cae6f645}', u'{26931ed6-4c28-4819-9b31-4b9e0d9d0a68}', u'{874beb70-b619-4706-a465-12421c6c8a85}', u'{3da687a9-2794-4519-880b-53c2f3b67b1f}'] py> labels [u'{9715ee01-57d5-407d-b89a-bae2fc6acecf}', u'{71295982-b5e7-4d64-9ac5-b8fbcffbd254}', u'{09e924fa-2a7c-47c6-9e17-e710c94bd2d1}', u'{2e31dbfb-f3c2-43ab-ab6a-f47abb4875a3}', u'{adfe3aef-4499-4c29-b94a-a9543e54e8a3}', u'{b5760819-f750-411d-884c-0bad16d68d09}', u'{c3884e9e-f0d8-4718-8fcb-66e82456f0b5}', u'{c1401878-e7f7-4e71-a097-e92ada42e653}', u'{a7d14879-1601-4789-9877-f636105b552c}', u'{ec5526c4-0fda-4963-8f18-1c7490b0a667}' Move the first knob 200 pixels downwards: q.setWidgetProperty( knobs[0], \"QCS_y\", q.getWidgetProperty(knobs[0], \"QCS_y\")+200) Modify the maximum of each knob so that the higher partials have less amplitude range (set maximum to 1, 0.9, 0.8, ..., 0.1): for knob in range(10): q.setWidgetProperty(knobs[knob], \"QCS_maximum\", 1-knob/10.0) Deleting widgets You can delete a widget using the method destroyWidget. You have to pass the widget's ID, again either as channel name or (better) as uuid string. This will remove the first knob in the example above: q.destroyWidget(\"partial_1\") This will delete all knobs: for w in knobs: q.destroyWidget(w) And this will delete all widgets of the active document: for w in q.getWidgetUuids(): q.destroyWidget(w) Getting and Setting Channel Names and Values After this cruel act of destruction, let us again create a slider and a display: py> q.createNewSlider(10, 10, \"level\") u'{b0294b09-5c87-4607-afda-2e55a8c7526e}' py> q.createNewDisplay(50, 10, \"message\") u'{a51b438f-f671-4108-8cdb-982387074e4d}' Now we will ask for the values of these widgets with the methods getChannelValue and getChannelString: py> q.getChannelValue('level') 0.0 py> q.getChannelString(\"level\") u'' py> q.getChannelValue('message') 0.0 py> q.getChannelString('message') u'Display' As you see, it depends on the type of the widget whether to query its value by getChannelValue or getChannelString. Although CsoundQt will not return an error, it makes no sense to ask a slider for its string (as its value is a number), and a display for its number (as its value is a string). With the methods setChannelValue and setChannelString we can change the main content of a widget very easily: py> q.setChannelValue(\"level\", 0.5) py> q.setChannelString(\"message\", \"Hey Joe again!\") This is much more handy than the general method using setWidgetProperty: py> q.setWidgetProperty(\"level\", \"QCS_value\", 1) py> q.setWidgetProperty(\"message\", \"QCS_label\", \"Nono\") Presets Now right-click in the widget panel and choose Store Preset -> New Preset: You can (but need not) enter a name for the preset. The important thing here is the number of the preset (here 0). - Now change the value of the slider and the text of the display widget. Save again as preset, now being preset 1. - Now execute this: q.loadPreset(0) You will see the content of the widgets reloaded to the first preset. Again, with q.loadPreset(1) you can switch to the second one. Like all python scripting functions in CsoundQt, you can not only use these methods from the Python Console or the Python Cratch Pad, but also from inside any csd. This is an example how to switch all the widgets to other predefined states, in this case controlled by the score. You will see the widgets for the first three seconds in Preset 0, then for the next three seconds in Preset 1, and finally again in Preset 0: <CsoundSynthesizer> <CsOptions> -odac </CsOptions> <CsInstruments> pyinit instr loadPreset index = p4 pycalli \"q.loadPreset\", index endin </CsInstruments> <CsScore> i \"loadPreset\" 0 3 0 i \"loadPreset\" + . 1 i \"loadPreset\" + . 0 </CsScore> </CsoundSynthesizer> Csound Functions Several functions can interact with the Csound engine, for example to query information about it. Note that the functions getSampleRate , getKsmps , getNumChannels and getCurrentCsound refer to a running instance of Csound. py> q.getVersion() # CsoundQt API version u'1.0' py> q.getSampleRate() 44100.0 py> q.getKsmps() 32 py> q.getNumChannels() 1 py> q.getCurrentCsound() CSOUND (C++ object at: 0x2fb5670) With getCsChannel , getCsStringChannel and setCsChannel you can access csound channels directly, independently from widgets. They are useful when testing a csd for use with the Csound API (in another application, a csLapdsa or Cabbage plugin, Android application) or similar. These are some examples, executed on a running csd instance: py> q.getCsChannel('my_num_chn') 0.0 py> q.getCsStringChannel('my_str_chn') u'' py> q.setCsChannel('my_num_chn', 1.1) py> q.setCsChannel('my_str_chn', 'Hey Csound') py> q.getCsChannel('my_num_chn') 1.1 py> q.getCsStringChannel('my_str_chn') u'Hey Csound' If you have a function table in your running Csound instance which has for instance been created with the line giSine ftgen 1, 0, 1024, 10, 1 , you can query getTableArray like this: py> q.getTableArray(1) MYFLT (C++ object at: 0x35d1c58) Finally, you can register a Python function as a callback to be executed in between processing blocks for Csound. The first argument should be the text that should be called on every pass. It can include arguments or variables which will be evaluated every time. You can also set a number of periods to skip to avoid. registerProcessCallback(QString func, int skipPeriods = 0) You can register the python text to be executed on every Csound control block callback, so you can execute a block of code, or call any function which is already defined. Creating Own GUIs with PythonQt One of the very powerful features of using Python inside CsoundQt is the ability to build own GUIs. This is done via the PythonQt library which gives you access to the Qt toolkit via Python. We will show some examples here. Have a look in the \"Scripts\" menu in CsoundQt to find much more (you will find the code in the \"Editor\" submenu). Dialog Box Sometimes it is practical to ask from user just one question - number or name of something and then execute the rest of the code (it can be done also inside a csd with python opcodes). In Qt, the class to create a dialog for one question is called QInputDialog . To use this or any other Qt classes, it is necessary to import the PythonQt and its Qt submodules. In most cases it is enough to add this line: from PythonQt.Qt import * or from PythonQt.QtGui import * At first an object of QInputDialog must be defined, then you can use its methods getInt, getDouble, getItem or getText to read the input in the form you need. This is a basic example: from PythonQt.Qt import * inpdia = QInputDialog() myInt = inpdia.getInt(inpdia,\"Example 1\",\"How many?\") print myInt Note that the variable myInt is now set to a value which remains in your Python interpreter. Your Python Console may look like this when executing the code above, and then ask for the value of myInt : py> 12 Evaluated 5 lines. py> myInt 12 Depending on the value of myInt , you can do funny or serious things. This code re-creates the Dialog Box whenever the user enters the number 1: from PythonQt.Qt import * def again(): inpdia = QInputDialog() myInt = inpdia.getInt(inpdia,\"Example 1\",\"How many?\") if myInt == 1: print \"If you continue to enter '1' I will come back again and again.\" again() else: print \"Thanks - Leaving now.\" again() This is a simple example showing how you can embed an own GUI in your Csound code. Here, Csound waits for the user input, and the prints out the entered value as the Csound variable giNumber: <CsoundSynthesizer> <CsOptions> -n </CsOptions> <CsInstruments> pyinit pyruni {{ from PythonQt.Qt import * dia = QInputDialog() dia.setDoubleDecimals(4) }} giNumber pyevali {{ dia.getDouble(dia,\"CS question\",\"Enter number: \") }} ; get the number from Qt dialog instr 1 print giNumber endin </CsInstruments> <CsScore> i 1 0 0 </CsScore> </CsoundSynthesizer> Simple GUI with Buttons The next example takes the user input (as a string) and transforms it to a sounding sequence of notes. First, make sure that the following csd is your active tab in CsoundQt: <CsoundSynthesizer> <CsInstruments> sr = 44100 nchnls = 2 0dbfs = 1 ksmps = 32 giSine ftgen 1, 0, 4096, 10, 1 ; sine #define MAINJOB(INSTNO) # Sstr strget p4 ilen strlen Sstr ipos = 0 marker: ; convert every character in the string to pitch ichr strchar Sstr, ipos icps = cpsmidinn(ichr)-$INSTNO*8 ;print icps event_i \"i\", \"sound\", 0+ipos/8, p3, ichr,icps, $INSTNO ; chord with arpeggio loop_lt ipos, 1, ilen, marker # instr 1 $MAINJOB(1) endin instr 2 $MAINJOB(2) endin instr 3 $MAINJOB(3) endin instr sound ichar = p4 ifreq = p5 itype = p6 kenv linen 0.1,0.1, p3,0.5 if itype== 1 then asig pluck kenv,ifreq,ifreq,0, 3, 0 elseif itype==2 then kenv adsr 0.05,0.1,0.5,1 asig poscil kenv*0.1,ifreq,giSine else asig buzz kenv,ifreq,10, giSine endif outs asig,asig endin </CsInstruments> <CsScore> f0 3600 i 1 0 4 \"huhuu\" </CsScore> </CsoundSynthesizer> Now copy this Python code into your Python Scratch Pad and evaluate it. Then type anything in the \"type here\" box and push the \"insert\" button. After pushing \"play\", the string will be played. You can also send the string as real-time event, to different instruments, in different durations. from PythonQt.Qt import * # FUNCTIONS============================== def insert(): # read input from UI and insert a line to score of csd file, open in CsoundQt with index csdIndex scoreLine = \"f0 3600\\n\" + \"i \" + instrSpinBox.text + \" 0 \" + durSpinBox.text + ' \"' + par1LineEdit.text + \"\\\"\" print scoreLine q.setSco(scoreLine, csdIndex) def play(): # play file with index csdIndex print \"PLAY\" q.play(csdIndex) def send(): # read input from UI send live event scoreLine = \"i \" + instrSpinBox.text + \" 0 \" + durSpinBox.text + ' \"' + par1LineEdit.text + \"\\\"\" print scoreLine q.sendEvent(csdIndex, scoreLine) def stopAndClose(): #stop csdIndex, close UI print \"STOP\" q.stop(csdIndex) window.delete() # MAIN ==================================== window = QWidget() # window as main widget layout = QGridLayout(window) # use gridLayout - the most flexible one - to place the widgets in a table-like structure window.setLayout(layout) window.setWindowTitle(\"PythonQt inteface example\") instrLabel = QLabel(\"Select instrument\") layout.addWidget(instrLabel,0,0) # first row, first column instrSpinBox = QSpinBox(window) instrSpinBox.setMinimum(1) instrSpinBox.setMaximum(3) layout.addWidget(instrSpinBox, 0, 1) # first row, second column durLabel = QLabel(\"Duration: \") layout.addWidget(durLabel,1,0) # etc durSpinBox = QSpinBox(window) durSpinBox.setMinimum(1) durSpinBox.setMaximum(20) durSpinBox.setValue(3) layout.addWidget(durSpinBox, 1, 1) par1Label = QLabel(\"Enter string for parameter 1: \") layout.addWidget(par1Label,2,0) par1LineEdit = QLineEdit(window) par1LineEdit.setMaxLength(30) # don't allow too long strings par1LineEdit.setText(\"type here\") layout.addWidget(par1LineEdit,2,1) insertButton = QPushButton(\"Insert\",window) layout.addWidget(insertButton, 3,0) playButton = QPushButton(\"Play\",window) layout.addWidget(playButton, 3,1) sendButton = QPushButton(\"Send event\",window) layout.addWidget(sendButton, 4,0) closeButton = QPushButton(\"Close\",window) layout.addWidget(closeButton, 4,1) # connect buttons and functions ================ #NB! function names must be without parenthesis! # number and type of arguments of the signal and slot (called function) must match insertButton.connect(SIGNAL(\"clicked()\"),insert ) # when clicked, run function insert() playButton.connect(SIGNAL(\"clicked()\"),play) #etc sendButton.connect(SIGNAL(\"clicked()\"),send) closeButton.connect(SIGNAL(\"clicked()\"),stopAndClose) window.show() # show the window and wait for clicks on buttons Another nice example of Tarmo Johannes, color-controller.py , is included in the CsoundQt application. List of PyQcsObject Methods in CsoundQt Load/Create/Activate a csd File int loadDocument(QString name, bool runNow = false) int getDocument(QString name = \"\") int newDocument(QString name) void setDocument(int index) Play/Pause/Stop a csd File void play(int index = -1, bool realtime = true) void pause(int index = -1) void stop(int index = -1) void stopAll() Send Score Events void sendEvent(int index, QString events) void sendEvent(QString events) void schedule(QVariant time, QVariant event) Query File Name/Path QString getFileName(int index = -1) QString getFilePath(int index = -1) Get csd Text QString getSelectedText(int index = -1, int section = -1) QString getCsd(int index = -1) QString getFullText(int index = -1) QString getOrc(int index = -1) QString getSco(int index = -1) QString getWidgetsText(int index = -1) QString getSelectedWidgetsText(int index = -1) QString getPresetsText(int index = -1) QString getOptionsText(int index = -1) Set csd Text void insertText(QString text, int index = -1, int section = -1) void setCsd(QString text, int index = -1) void setFullText(QString text, int index = -1) void setOrc(QString text, int index = -1) void setSco(QString text, int index = -1) void setWidgetsText(QString text, int index = -1) void setPresetsText(QString text, int index = -1) void setOptionsText(QString text, int index = -1) Opcode Exists bool opcodeExists(QString opcodeName) Create Widgets QString createNewLabel(int x = 0, int y = 0, QString channel = QString(), int index = -1) QString createNewDisplay(int x = 0, int y = 0, QString channel = QString(), int index = -1) QString createNewScrollNumber(int x = 0, int y = 0, QString channel = QString(), int index = -1) QString createNewLineEdit(int x = 0, int y = 0, QString channel = QString(), int index = -1) QString createNewSpinBox(int x = 0, int y = 0, QString channel = QString(), int index = -1) QString createNewSlider(QString channel, int index = -1) QString createNewSlider(int x = 0, int y = 0, QString channel = QString(), int index = -1) QString createNewButton(int x = 0, int y = 0, QString channel = QString(), int index = -1) QString createNewKnob(int x = 0, int y = 0, QString channel = QString(), int index = -1) QString createNewCheckBox(int x = 0, int y = 0, QString channel = QString(), int index = -1) QString createNewMenu(int x = 0, int y = 0, QString channel = QString(), int index = -1) QString createNewMeter(int x = 0, int y = 0, QString channel = QString(), int index = -1) QString createNewConsole(int x = 0, int y = 0, QString channel = QString(), int index = -1) QString createNewGraph(int x = 0, int y = 0, QString channel = QString(), int index = -1) QString createNewScope(int x = 0, int y = 0, QString channel = QString(), int index = -1) Query Widgets QVariant getWidgetProperty(QString widgetid, QString property, int index= -1) double getChannelValue(QString channel, int index = -1) QString getChannelString(QString channel, int index = -1) QStringList listWidgetProperties(QString widgetid, int index = -1) QStringList getWidgetUuids(int index = -1) Modify Widgets void setWidgetProperty(QString widgetid, QString property, QVariant value, int index= -1) void setChannelValue(QString channel, double value, int index = -1) void setChannelString(QString channel, QString value, int index = -1) Delete Widgets bool destroyWidget(QString widgetid) Presets void loadPreset(int presetIndex, int index = -1) Live Event Sheet QuteSheet* getSheet(int index = -1, int sheetIndex = -1) QuteSheet* getSheet(int index, QString sheetName) Csound / API QString getVersion() void refresh() void setCsChannel(QString channel, double value, int index = -1) void setCsChannel(QString channel, QString value, int index = -1) double getCsChannel(QString channel, int index = -1) QString getCsStringChannel(QString channel, int index = -1) CSOUND* getCurrentCsound() double getSampleRate(int index = -1) int getKsmps(int index = -1) int getNumChannels(int index = -1) MYFLT *getTableArray(int ftable, int index = -1) void registerProcessCallback(QString func, int skipPeriods = 0, int index = -1)","title":"PythonQt"},{"location":"pythonqt/#pythonqt","text":"If CsoundQt is built with PythonQt support, it enables a lot of new possibilities, mostly in three main fields: interaction with the CsoundQt interface, interaction with widgets and using classes from Qt libraries to build custom interfaces in python. If you start CsoundQt and can open the panels \"Python Console\" and \"Python Scratch Pad\", you are ready to go.","title":"PythonQt"},{"location":"pythonqt/#the-csoundqt-python-object","text":"As CsoundQt has formerly been called QuteCsound, this name can still be found in the sources. The QuteCsound object (called PyQcsObject in the sources) is the interface for scripting CsoundQt. All declarations of the class can be found in the file pyqcsobject.h in the sources. It enables the control of a large part of CsoundQt's possibilities from the python interpreter, the python scratchpad, from scripts or from inside of a running Csound file via Csound's python opcodes. By default, a PyQcsObject is already available in the python interpreter of CsoundQt called \u201cq\u201d. To use any of its methods, use form like q.stopAll() The methods can be divided into four groups: access CsoundQt's interface (open or close files, start or stop performance etc) edit Csound files which has already been opened as tabs in CsoundQt manage CsoundQt's widgets interface with the running Csound engine","title":"The CsoundQt Python Object"},{"location":"pythonqt/#file-and-control-access","text":"If you have CsoundQt running on your computer, you should type the following code examples in the Python Console (if only one line) or the Python Scratch Pad (if more than one line of code).","title":"File and Control Access"},{"location":"pythonqt/#create-or-load-a-csd-file","text":"Type q.newDocument('cs_floss_1.csd') in your Python Console and hit the Return key. This will create a new csd file named \"cs_floss_1.csd\" in your working directory. And it also returns an integer (in the screenshot below: 3) as index for this file. If you close this file and then execute the line q.loadDocument('cs_floss_1.csd') , you should see the file again as tab in CsoundQt. Let us have a look how these two methods newDocument and loadDocument are described in the sources: int newDocument(QString name) int loadDocument(QString name, bool runNow = false) The method newDocument needs a name as string (\"QString\") as argument, and returns an integer. The method loadDocument also takes a name as input string and returns an integer as index for this csd. The additional argument runNow is optional. It expects a boolean value (True/False or 1/0). The default is \"false\" which means \"do not run immediately after loading\". So if you type instead q.loadDocument('cs_floss_1.csd', True) or q.loadDocument('cs_floss_1.csd', 1) , the csd file should start immediately.","title":"Create or Load a csd File"},{"location":"pythonqt/#run-pause-or-stop-a-csd-file","text":"For the next methods, we first need some more code in our csd. So let your \"cs_floss_1.csd\" look like this: <CsoundSynthesizer> <CsOptions> </CsOptions> <CsInstruments> sr = 44100 ksmps = 32 0dbfs = 1 nchnls = 1 giSine ftgen 0, 0, 1024, 10, 1 instr 1 kPitch expseg 500, p3, 1000 aSine poscil .2, kPitch, giSine out aSine endin </CsInstruments> <CsScore> i 1 0 10 </CsScore> </CsoundSynthesizer> This instrument performs a simple pitch glissando from 500 to 1000 Hz in ten seconds. Now make sure that this csd is the currently active tab in CsoundQt, and execute this: q.play() This starts the performance. If you do nothing, the performance will stop after ten seconds. If you type instead after some seconds q.pause() the performance will pause. The same task q.pause() will resume the performance. Note that this is different from executing q.play() after q.pause() ; this will start a new performance. With q.stop() you can stop the current performance.","title":"Run, Pause or Stop a csd File"},{"location":"pythonqt/#access-to-different-csd-tabs-via-indices","text":"The play() , pause() and stop() method, as well as other methods in CsoundQt's integrated Python, allow also to access csd file tabs which are not currently active. As we saw in the creation of a new csd file by q.newDocument('cs_floss_1.csd') , each of them gets an index. This index allows universal access to all csd files in a running CsoundQt instance. First, create a new file \"cs_floss_2.csd\", for instance with this code: <CsoundSynthesizer> <CsOptions> </CsOptions> <CsInstruments> sr = 44100 ksmps = 32 0dbfs = 1 nchnls = 1 giSine ftgen 0, 0, 1024, 10, 1 instr 1 kPitch expseg 500, p3, 1000 aSine poscil .2, kPitch, giSine out aSine endin </CsInstruments> <CsScore> i 1 0 10 </CsScore> </CsoundSynthesizer> Now get the index of these two tabs in executing q.getDocument('cs_floss_1.csd') resp. q.getDocument('cs_floss_2.csd') . This will show something like this: So in my case the indices are 3 and 4.5 Now you can start, pause and stop any of these files with tasks like these: q.play(3) q.play(4) q.stop(3) q.stop(4) If you have checked \"Allow simultaneous play\" in CsoundQt's Configure->General ... .. you should be able to run both csds simultaneously. To stop all running files, use: q.stopAll() To set a csd as active, use setDocument(index) . This will have the same effect as clicking on the tab.","title":"Access to Different csd Tabs via Indices"},{"location":"pythonqt/#send-score-events","text":"Now comment out the score line in the file \"cs_floss_2.csd\", or simply remove it. When you now start Csound, this tab should run. Now execute this command: q.sendEvent('i 1 0 2') This should trigger instrument 1 for two seconds.","title":"Send Score Events"},{"location":"pythonqt/#query-file-name-or-path","text":"In case you need to know the name or the path of a csd file, you have these functions: getFileName() getFilePath() Calling the method without any arguments, it refers to the currently active csd. An index as argument links to a specific tab. Here is a Python code snippet which returns indices, file names and file paths of all tabs in CsoundQt: index = 0 while q.getFileName(index): print 'index = %d' % index print ' File Name = %s' % q.getFileName(index) print ' File Path = %s' % q.getFilePath(index) index += 1 Which returns for instance: index = 0 File Name = /home/jh/Joachim/Stuecke/30Carin/csound/130328.csd File Path = /home/jh/Joachim/Stuecke/30Carin/csound index = 1 File Name = /home/jh/src/csoundmanual/examples/transegr.csd File Path = /home/jh/src/csoundmanual/examples index = 2 File Name = /home/jh/Arbeitsfl\u00e4che/test.csd File Path = /home/jh/Arbeitsfl\u00e4che index = 3 File Name = /home/jh/Joachim/Csound/FLOSS/Release03/Chapter_12C_PythonInCsoundQt/cs_floss_1.csd File Path = /home/jh/Joachim/Csound/FLOSS/Release03/Chapter_12C_PythonInCsoundQt index = 4 File Name = /home/jh/Joachim/Csound/FLOSS/Release03/Chapter_12C_PythonInCsoundQt/cs_floss_2.csd File Path = /home/jh/Joachim/Csound/FLOSS/Release03/Chapter_12C_PythonInCsoundQt","title":"Query File Name or Path"},{"location":"pythonqt/#get-and-set-csd-text","text":"One of the main features of Python scripting in CsoundQt is the ability to edit any section of a csd file. There are several \"get\" functions, to query text, and also \"set\" functions to change or insert text.","title":"Get and Set csd Text"},{"location":"pythonqt/#get-text-from-a-csd-file","text":"Make sure your \"cs_floss_2.csd\" is the active tab, and execute the following python code lines: q.getCsd() q.getOrc() q.getSco() The q.getOrc() task should return this: u'\\nsr = 44100\\nksmps = 32\\n0dbfs = 1\\nnchnls = 1\\n\\ngiSine ftgen 0, 0, 1024, 10, 1\\n\\ninstr 1\\nkPitch expseg 1000, p3, 500\\naSine poscil .2, kPitch, giSine\\n out aSine\\nendin\\n' The u'...' indicates that a unicode string is returned. As usual in format expressions, newlines are indicated with the '\\n' formatter. You can also get the text for the CsOptions , the text for CsoundQt's widgets and presets, or the full text of this csd: getOptionsText() getWidgetsText() getPresetsText()getCsd() getFullText() If you select some text or some widgets, you will get the selection with these commands: getSelectedText() getSelectedWidgetsText() As usual, you can specify any of the loaded csds via its index. So calling q.getOrc(3) instead of q.getOrc() will return the orc text of the csd with index 3, instead of the orc text of the currently active csd.","title":"Get Text from a csd File"},{"location":"pythonqt/#set-text-in-a-csd-file","text":"Set the cursor anywhere in your active csd, and execute the following line in the Python Console: q.insertText('my nice insertion') You will see your nice insertion in the csd file. In case you do not like it, you can choose Edit->Undo. It does not make a difference for the CsoundQt editor whether the text has been typed by hand, or by the internal Python script facility. Text can also be inserted to individual sections using the functions: setCsd(text) setFullText(text) setOrc(text) setSco(text) setWidgetsText(text) setPresetsText(text) setOptionsText(text) Note that the whole section will be overwritten with the string text.","title":"Set Text in a csd File"},{"location":"pythonqt/#opcode-exists","text":"You can ask whether a string is an opcode name, or not, with the function opcodeExtists, for instance: py> q.opcodeExists('line') True py> q.opcodeExists('OSCsend') True py> q.opcodeExists('Line') False py> q.opcodeExists('Joe') NotYet","title":"Opcode Exists"},{"location":"pythonqt/#example-score-generation","text":"A typical application for setting text in a csd is to generate a score. There have been numerous tools and programs to do this, and it can be very pleasant to use CsoundQt's Python scripting for this task. Let us modify our previous instrument first to make it more flexible: <CsoundSynthesizer> <CsOptions> </CsOptions> <CsInstruments> sr = 44100 ksmps = 32 0dbfs = 1 nchnls = 1 giSine ftgen 0, 0, 1024, 10, 1 instr 1 iOctStart = p4 ;pitch in octave notation at start iOctEnd = p5 ;and end iDbStart = p6 ;dB at start iDbEnd = p7 ;and end kPitch expseg cpsoct(iOctStart), p3, cpsoct(iOctEnd) kEnv linseg iDbStart, p3, iDbEnd aSine poscil ampdb(kEnv), kPitch, giSine iFad random p3/20, p3/5 aOut linen aSine, iFad, p3, iFad out aOut endin </CsInstruments> <CsScore> i 1 0 10 ;will be overwritten by the python score generator </CsScore> </CsoundSynthesizer> The following code will now insert 30 score events in the score section: from random import uniform numScoEvents = 30 sco = '' for ScoEvent in range(numScoEvents): start = uniform(0, 40) dur = 2**uniform(-5, 3) db1, db2 = [uniform(-36, -12) for x in range(2)] oct1, oct2 = [uniform(6, 10) for x in range(2)] scoLine = 'i 1 %f %f %f %f %d %d\\n' % (start, dur, oct1, oct2, db1, db2) sco = sco + scoLine q.setSco(sco) This generates a texture with either falling or rising gliding pitches. The durations are set in a way that shorter durations are more frequently than larger ones. The volume and pitch ranges allow many variations in the simple shape.","title":"Example: Score Generation"},{"location":"pythonqt/#widgets","text":"","title":"Widgets"},{"location":"pythonqt/#creating-a-label","text":"Click on the \"Widgets\" button to see the widgets panel. Then execute this command in the Python Console: q.createNewLabel() The properties dialog of the label pops up. Type \"Hello Label!\" or something like this as text. When you click \"Ok\", you will see the label widget in the panel, and a strange unicode string as return value in the Python Console: The string u'{3a171aa2-4cf8-4f05-9f30-172863909f56}' is a \"universally unique identifier\" (uuid). Each widget can be accessed by this ID.","title":"Creating a Label"},{"location":"pythonqt/#specifying-the-common-properties-as-arguments","text":"Instead of having a live talk with the properties dialog, we can specify all properties as arguments for the createNewLabel method: q.createNewLabel(200, 100, \"second_label\") This should be the result: A new label has been created\u2014without opening the properties dialog\u2014at position x=200 y=1008 with the name \"second_label\". If you want to create a widget not in the active document, but in another tab, you can also specify the tab index. This command will create a widget at the same position and with the same name in the first tab: q.createNewLabel(200, 100, \"second_label\", 0)","title":"Specifying the Common Properties as Arguments"},{"location":"pythonqt/#setting-the-specific-properties","text":"Each widget has a xy position and a channel name. But the other properties depend on the type of widget. A Display has name, width and height, but no resolution like a SpinBox. The function setWidgetProperty refers to a widget via its ID and sets a property. Let us try this for a Display widget. This command creates a Display widget with channel name \"disp_chan_01\" at position x=50 y=150: q.createNewDisplay(50, 150, \"disp_chan_01\") And this sets the text to a new string: q.setWidgetProperty(\"disp_chan_01\", \"QCS_label\", \"Hey Joe!\") The setWidgetProperty method needs the ID of a widget first. This can be expressed either as channel name (\"disp_chan_01\") as in the command above, or as uuid. As I got the string u'{a71c0c67-3d54-4d4a-88e6-8df40070a7f5}' as uuid, I can also write: q.setWidgetProperty(u'{a71c0c67-3d54-4d4a-88e6-8df40070a7f5}', \"QCS_label\", \"Hey Joeboe!\") For humans, referring to the channel name as ID is probably preferable ... - But as the createNew... method returns the uuid, you can use it implicitely, for instance in this command: q.setWidgetProperty(q.createNewLabel(70, 70, \"WOW\"), \"QCS_fontsize\", 18)","title":"Setting the Specific Properties"},{"location":"pythonqt/#getting-the-property-names-and-values","text":"You may have asked how to know that the visible text of a Display widget is called \"QCS_label\" and the fontsize \"QCS_fontsize\". If you do not know the name of a property, ask CsoundQt for it via the function listWidgetProperties : py> q.listWidgetProperties(\"disp_chan_01\") (u'QCS_x', u'QCS_y', u'QCS_uuid', u'QCS_visible', u'QCS_midichan', u'QCS_midicc', u'QCS_label', u'QCS_alignment', u'QCS_precision', u'QCS_font', u'QCS_fontsize', u'QCS_bgcolor', u'QCS_bgcolormode', u'QCS_color', u'QCS_bordermode', u'QCS_borderradius', u'QCS_borderwidth', u'QCS_width', u'QCS_height', u'QCS_objectName') As you see, listWidgetProperties returns all properties in a tuple. You can query the value of a single property with the function getWidgetProperty, which takes the uuid and the property as inputs, and returns the property value. So this code snippet asks for all property values of our Display widget: widgetID = \"disp_chan_01\" properties = q.listWidgetProperties(widgetID) for property in properties: propVal = q.getWidgetProperty(widgetID, property) print property + ' = ' + str(propVal) Returns: QCS_x = 50 QCS_y = 150 QCS_uuid = {a71c0c67-3d54-4d4a-88e6-8df40070a7f5} QCS_visible = True QCS_midichan = 0 QCS_midicc = -3 QCS_label = Hey Joeboe! QCS_alignment = left QCS_precision = 3 QCS_font = Arial QCS_fontsize = 10 QCS_bgcolor = #ffffff QCS_bgcolormode = False QCS_color = #000000 QCS_bordermode = border QCS_borderradius = 1 QCS_borderwidth = 1 QCS_width = 80 QCS_height = 25 QCS_objectName = disp_chan_01","title":"Getting the Property Names and Values"},{"location":"pythonqt/#get-the-uuids-of-all-widgets","text":"For getting the uuid strings of all widgets in the active csd tab, type q.getWidgetUuids() As always, the uuid strings of other csd tabs can be accessed via the index.","title":"Get the UUIDs of all Widgets"},{"location":"pythonqt/#some-examples-for-creating-and-modifying-widgets","text":"Create a new slider with the channel name \"level\" at position 10,10 in the (already open but not necessarily active) document \"test.csd\": q.createNewSlider(10, 10, \"level\", q.getDocument(\"test.csd\")) Create ten knobs with the channel names \"partial_1\", \"partial_2\" etc, and the according labels \"amp_part_1\", \"amp_part_2\" etc in the currently active document: for no in range(10): q.createNewKnob(100*no, 5, \"partial_\"+str(no+1)) q.createNewLabel(100*no+5, 90, \"amp_part_\"+str(no+1)) Alternatively, you can store the uuid strings while creating: knobs, labels = [], [] for no in range(10): knobs.append(q.createNewKnob(100*no, 5, \"partial_\"+str(no+1))) labels.append(q.createNewLabel(100*no+5, 90, \"amp_part_\"+str(no+1))) The variables knobs and labels now contain the IDs: py> knobs [u'{8d10f9e3-70ce-4953-94b5-24cf8d6f6adb}', u'{d1c98b52-a0a1-4f48-9bca-bac55dad0de7}', u'{b7bf4b76-baff-493f-bc1f-43d61c4318ac}', u'{1332208d-e479-4152-85a8-0f4e6e589d9d}', u'{428cc329-df4a-4d04-9cea-9be3e3c2a41c}', u'{1e691299-3e24-46cc-a3b6-85fdd40eac15}', u'{a93c2b27-89a8-41b2-befb-6768cae6f645}', u'{26931ed6-4c28-4819-9b31-4b9e0d9d0a68}', u'{874beb70-b619-4706-a465-12421c6c8a85}', u'{3da687a9-2794-4519-880b-53c2f3b67b1f}'] py> labels [u'{9715ee01-57d5-407d-b89a-bae2fc6acecf}', u'{71295982-b5e7-4d64-9ac5-b8fbcffbd254}', u'{09e924fa-2a7c-47c6-9e17-e710c94bd2d1}', u'{2e31dbfb-f3c2-43ab-ab6a-f47abb4875a3}', u'{adfe3aef-4499-4c29-b94a-a9543e54e8a3}', u'{b5760819-f750-411d-884c-0bad16d68d09}', u'{c3884e9e-f0d8-4718-8fcb-66e82456f0b5}', u'{c1401878-e7f7-4e71-a097-e92ada42e653}', u'{a7d14879-1601-4789-9877-f636105b552c}', u'{ec5526c4-0fda-4963-8f18-1c7490b0a667}' Move the first knob 200 pixels downwards: q.setWidgetProperty( knobs[0], \"QCS_y\", q.getWidgetProperty(knobs[0], \"QCS_y\")+200) Modify the maximum of each knob so that the higher partials have less amplitude range (set maximum to 1, 0.9, 0.8, ..., 0.1): for knob in range(10): q.setWidgetProperty(knobs[knob], \"QCS_maximum\", 1-knob/10.0)","title":"Some Examples for Creating and Modifying Widgets"},{"location":"pythonqt/#deleting-widgets","text":"You can delete a widget using the method destroyWidget. You have to pass the widget's ID, again either as channel name or (better) as uuid string. This will remove the first knob in the example above: q.destroyWidget(\"partial_1\") This will delete all knobs: for w in knobs: q.destroyWidget(w) And this will delete all widgets of the active document: for w in q.getWidgetUuids(): q.destroyWidget(w)","title":"Deleting widgets"},{"location":"pythonqt/#getting-and-setting-channel-names-and-values","text":"After this cruel act of destruction, let us again create a slider and a display: py> q.createNewSlider(10, 10, \"level\") u'{b0294b09-5c87-4607-afda-2e55a8c7526e}' py> q.createNewDisplay(50, 10, \"message\") u'{a51b438f-f671-4108-8cdb-982387074e4d}' Now we will ask for the values of these widgets with the methods getChannelValue and getChannelString: py> q.getChannelValue('level') 0.0 py> q.getChannelString(\"level\") u'' py> q.getChannelValue('message') 0.0 py> q.getChannelString('message') u'Display' As you see, it depends on the type of the widget whether to query its value by getChannelValue or getChannelString. Although CsoundQt will not return an error, it makes no sense to ask a slider for its string (as its value is a number), and a display for its number (as its value is a string). With the methods setChannelValue and setChannelString we can change the main content of a widget very easily: py> q.setChannelValue(\"level\", 0.5) py> q.setChannelString(\"message\", \"Hey Joe again!\") This is much more handy than the general method using setWidgetProperty: py> q.setWidgetProperty(\"level\", \"QCS_value\", 1) py> q.setWidgetProperty(\"message\", \"QCS_label\", \"Nono\")","title":"Getting and Setting Channel Names and Values"},{"location":"pythonqt/#presets","text":"Now right-click in the widget panel and choose Store Preset -> New Preset: You can (but need not) enter a name for the preset. The important thing here is the number of the preset (here 0). - Now change the value of the slider and the text of the display widget. Save again as preset, now being preset 1. - Now execute this: q.loadPreset(0) You will see the content of the widgets reloaded to the first preset. Again, with q.loadPreset(1) you can switch to the second one. Like all python scripting functions in CsoundQt, you can not only use these methods from the Python Console or the Python Cratch Pad, but also from inside any csd. This is an example how to switch all the widgets to other predefined states, in this case controlled by the score. You will see the widgets for the first three seconds in Preset 0, then for the next three seconds in Preset 1, and finally again in Preset 0: <CsoundSynthesizer> <CsOptions> -odac </CsOptions> <CsInstruments> pyinit instr loadPreset index = p4 pycalli \"q.loadPreset\", index endin </CsInstruments> <CsScore> i \"loadPreset\" 0 3 0 i \"loadPreset\" + . 1 i \"loadPreset\" + . 0 </CsScore> </CsoundSynthesizer>","title":"Presets"},{"location":"pythonqt/#csound-functions","text":"Several functions can interact with the Csound engine, for example to query information about it. Note that the functions getSampleRate , getKsmps , getNumChannels and getCurrentCsound refer to a running instance of Csound. py> q.getVersion() # CsoundQt API version u'1.0' py> q.getSampleRate() 44100.0 py> q.getKsmps() 32 py> q.getNumChannels() 1 py> q.getCurrentCsound() CSOUND (C++ object at: 0x2fb5670) With getCsChannel , getCsStringChannel and setCsChannel you can access csound channels directly, independently from widgets. They are useful when testing a csd for use with the Csound API (in another application, a csLapdsa or Cabbage plugin, Android application) or similar. These are some examples, executed on a running csd instance: py> q.getCsChannel('my_num_chn') 0.0 py> q.getCsStringChannel('my_str_chn') u'' py> q.setCsChannel('my_num_chn', 1.1) py> q.setCsChannel('my_str_chn', 'Hey Csound') py> q.getCsChannel('my_num_chn') 1.1 py> q.getCsStringChannel('my_str_chn') u'Hey Csound' If you have a function table in your running Csound instance which has for instance been created with the line giSine ftgen 1, 0, 1024, 10, 1 , you can query getTableArray like this: py> q.getTableArray(1) MYFLT (C++ object at: 0x35d1c58) Finally, you can register a Python function as a callback to be executed in between processing blocks for Csound. The first argument should be the text that should be called on every pass. It can include arguments or variables which will be evaluated every time. You can also set a number of periods to skip to avoid. registerProcessCallback(QString func, int skipPeriods = 0) You can register the python text to be executed on every Csound control block callback, so you can execute a block of code, or call any function which is already defined.","title":"Csound Functions"},{"location":"pythonqt/#creating-own-guis-with-pythonqt","text":"One of the very powerful features of using Python inside CsoundQt is the ability to build own GUIs. This is done via the PythonQt library which gives you access to the Qt toolkit via Python. We will show some examples here. Have a look in the \"Scripts\" menu in CsoundQt to find much more (you will find the code in the \"Editor\" submenu).","title":"Creating Own GUIs with PythonQt"},{"location":"pythonqt/#dialog-box","text":"Sometimes it is practical to ask from user just one question - number or name of something and then execute the rest of the code (it can be done also inside a csd with python opcodes). In Qt, the class to create a dialog for one question is called QInputDialog . To use this or any other Qt classes, it is necessary to import the PythonQt and its Qt submodules. In most cases it is enough to add this line: from PythonQt.Qt import * or from PythonQt.QtGui import * At first an object of QInputDialog must be defined, then you can use its methods getInt, getDouble, getItem or getText to read the input in the form you need. This is a basic example: from PythonQt.Qt import * inpdia = QInputDialog() myInt = inpdia.getInt(inpdia,\"Example 1\",\"How many?\") print myInt Note that the variable myInt is now set to a value which remains in your Python interpreter. Your Python Console may look like this when executing the code above, and then ask for the value of myInt : py> 12 Evaluated 5 lines. py> myInt 12 Depending on the value of myInt , you can do funny or serious things. This code re-creates the Dialog Box whenever the user enters the number 1: from PythonQt.Qt import * def again(): inpdia = QInputDialog() myInt = inpdia.getInt(inpdia,\"Example 1\",\"How many?\") if myInt == 1: print \"If you continue to enter '1' I will come back again and again.\" again() else: print \"Thanks - Leaving now.\" again() This is a simple example showing how you can embed an own GUI in your Csound code. Here, Csound waits for the user input, and the prints out the entered value as the Csound variable giNumber: <CsoundSynthesizer> <CsOptions> -n </CsOptions> <CsInstruments> pyinit pyruni {{ from PythonQt.Qt import * dia = QInputDialog() dia.setDoubleDecimals(4) }} giNumber pyevali {{ dia.getDouble(dia,\"CS question\",\"Enter number: \") }} ; get the number from Qt dialog instr 1 print giNumber endin </CsInstruments> <CsScore> i 1 0 0 </CsScore> </CsoundSynthesizer>","title":"Dialog Box"},{"location":"pythonqt/#simple-gui-with-buttons","text":"The next example takes the user input (as a string) and transforms it to a sounding sequence of notes. First, make sure that the following csd is your active tab in CsoundQt: <CsoundSynthesizer> <CsInstruments> sr = 44100 nchnls = 2 0dbfs = 1 ksmps = 32 giSine ftgen 1, 0, 4096, 10, 1 ; sine #define MAINJOB(INSTNO) # Sstr strget p4 ilen strlen Sstr ipos = 0 marker: ; convert every character in the string to pitch ichr strchar Sstr, ipos icps = cpsmidinn(ichr)-$INSTNO*8 ;print icps event_i \"i\", \"sound\", 0+ipos/8, p3, ichr,icps, $INSTNO ; chord with arpeggio loop_lt ipos, 1, ilen, marker # instr 1 $MAINJOB(1) endin instr 2 $MAINJOB(2) endin instr 3 $MAINJOB(3) endin instr sound ichar = p4 ifreq = p5 itype = p6 kenv linen 0.1,0.1, p3,0.5 if itype== 1 then asig pluck kenv,ifreq,ifreq,0, 3, 0 elseif itype==2 then kenv adsr 0.05,0.1,0.5,1 asig poscil kenv*0.1,ifreq,giSine else asig buzz kenv,ifreq,10, giSine endif outs asig,asig endin </CsInstruments> <CsScore> f0 3600 i 1 0 4 \"huhuu\" </CsScore> </CsoundSynthesizer> Now copy this Python code into your Python Scratch Pad and evaluate it. Then type anything in the \"type here\" box and push the \"insert\" button. After pushing \"play\", the string will be played. You can also send the string as real-time event, to different instruments, in different durations. from PythonQt.Qt import * # FUNCTIONS============================== def insert(): # read input from UI and insert a line to score of csd file, open in CsoundQt with index csdIndex scoreLine = \"f0 3600\\n\" + \"i \" + instrSpinBox.text + \" 0 \" + durSpinBox.text + ' \"' + par1LineEdit.text + \"\\\"\" print scoreLine q.setSco(scoreLine, csdIndex) def play(): # play file with index csdIndex print \"PLAY\" q.play(csdIndex) def send(): # read input from UI send live event scoreLine = \"i \" + instrSpinBox.text + \" 0 \" + durSpinBox.text + ' \"' + par1LineEdit.text + \"\\\"\" print scoreLine q.sendEvent(csdIndex, scoreLine) def stopAndClose(): #stop csdIndex, close UI print \"STOP\" q.stop(csdIndex) window.delete() # MAIN ==================================== window = QWidget() # window as main widget layout = QGridLayout(window) # use gridLayout - the most flexible one - to place the widgets in a table-like structure window.setLayout(layout) window.setWindowTitle(\"PythonQt inteface example\") instrLabel = QLabel(\"Select instrument\") layout.addWidget(instrLabel,0,0) # first row, first column instrSpinBox = QSpinBox(window) instrSpinBox.setMinimum(1) instrSpinBox.setMaximum(3) layout.addWidget(instrSpinBox, 0, 1) # first row, second column durLabel = QLabel(\"Duration: \") layout.addWidget(durLabel,1,0) # etc durSpinBox = QSpinBox(window) durSpinBox.setMinimum(1) durSpinBox.setMaximum(20) durSpinBox.setValue(3) layout.addWidget(durSpinBox, 1, 1) par1Label = QLabel(\"Enter string for parameter 1: \") layout.addWidget(par1Label,2,0) par1LineEdit = QLineEdit(window) par1LineEdit.setMaxLength(30) # don't allow too long strings par1LineEdit.setText(\"type here\") layout.addWidget(par1LineEdit,2,1) insertButton = QPushButton(\"Insert\",window) layout.addWidget(insertButton, 3,0) playButton = QPushButton(\"Play\",window) layout.addWidget(playButton, 3,1) sendButton = QPushButton(\"Send event\",window) layout.addWidget(sendButton, 4,0) closeButton = QPushButton(\"Close\",window) layout.addWidget(closeButton, 4,1) # connect buttons and functions ================ #NB! function names must be without parenthesis! # number and type of arguments of the signal and slot (called function) must match insertButton.connect(SIGNAL(\"clicked()\"),insert ) # when clicked, run function insert() playButton.connect(SIGNAL(\"clicked()\"),play) #etc sendButton.connect(SIGNAL(\"clicked()\"),send) closeButton.connect(SIGNAL(\"clicked()\"),stopAndClose) window.show() # show the window and wait for clicks on buttons Another nice example of Tarmo Johannes, color-controller.py , is included in the CsoundQt application.","title":"Simple GUI with Buttons"},{"location":"pythonqt/#list-of-pyqcsobject-methods-in-csoundqt","text":"","title":"List of PyQcsObject Methods in CsoundQt"},{"location":"pythonqt/#loadcreateactivate-a-csd-file","text":"int loadDocument(QString name, bool runNow = false) int getDocument(QString name = \"\") int newDocument(QString name) void setDocument(int index)","title":"Load/Create/Activate a csd File"},{"location":"pythonqt/#playpausestop-a-csd-file","text":"void play(int index = -1, bool realtime = true) void pause(int index = -1) void stop(int index = -1) void stopAll()","title":"Play/Pause/Stop a csd File"},{"location":"pythonqt/#send-score-events_1","text":"void sendEvent(int index, QString events) void sendEvent(QString events) void schedule(QVariant time, QVariant event)","title":"Send Score Events"},{"location":"pythonqt/#query-file-namepath","text":"QString getFileName(int index = -1) QString getFilePath(int index = -1)","title":"Query File Name/Path"},{"location":"pythonqt/#get-csd-text","text":"QString getSelectedText(int index = -1, int section = -1) QString getCsd(int index = -1) QString getFullText(int index = -1) QString getOrc(int index = -1) QString getSco(int index = -1) QString getWidgetsText(int index = -1) QString getSelectedWidgetsText(int index = -1) QString getPresetsText(int index = -1) QString getOptionsText(int index = -1)","title":"Get csd Text"},{"location":"pythonqt/#set-csd-text","text":"void insertText(QString text, int index = -1, int section = -1) void setCsd(QString text, int index = -1) void setFullText(QString text, int index = -1) void setOrc(QString text, int index = -1) void setSco(QString text, int index = -1) void setWidgetsText(QString text, int index = -1) void setPresetsText(QString text, int index = -1) void setOptionsText(QString text, int index = -1)","title":"Set csd Text"},{"location":"pythonqt/#opcode-exists_1","text":"bool opcodeExists(QString opcodeName)","title":"Opcode Exists"},{"location":"pythonqt/#create-widgets","text":"QString createNewLabel(int x = 0, int y = 0, QString channel = QString(), int index = -1) QString createNewDisplay(int x = 0, int y = 0, QString channel = QString(), int index = -1) QString createNewScrollNumber(int x = 0, int y = 0, QString channel = QString(), int index = -1) QString createNewLineEdit(int x = 0, int y = 0, QString channel = QString(), int index = -1) QString createNewSpinBox(int x = 0, int y = 0, QString channel = QString(), int index = -1) QString createNewSlider(QString channel, int index = -1) QString createNewSlider(int x = 0, int y = 0, QString channel = QString(), int index = -1) QString createNewButton(int x = 0, int y = 0, QString channel = QString(), int index = -1) QString createNewKnob(int x = 0, int y = 0, QString channel = QString(), int index = -1) QString createNewCheckBox(int x = 0, int y = 0, QString channel = QString(), int index = -1) QString createNewMenu(int x = 0, int y = 0, QString channel = QString(), int index = -1) QString createNewMeter(int x = 0, int y = 0, QString channel = QString(), int index = -1) QString createNewConsole(int x = 0, int y = 0, QString channel = QString(), int index = -1) QString createNewGraph(int x = 0, int y = 0, QString channel = QString(), int index = -1) QString createNewScope(int x = 0, int y = 0, QString channel = QString(), int index = -1)","title":"Create Widgets"},{"location":"pythonqt/#query-widgets","text":"QVariant getWidgetProperty(QString widgetid, QString property, int index= -1) double getChannelValue(QString channel, int index = -1) QString getChannelString(QString channel, int index = -1) QStringList listWidgetProperties(QString widgetid, int index = -1) QStringList getWidgetUuids(int index = -1)","title":"Query Widgets"},{"location":"pythonqt/#modify-widgets","text":"void setWidgetProperty(QString widgetid, QString property, QVariant value, int index= -1) void setChannelValue(QString channel, double value, int index = -1) void setChannelString(QString channel, QString value, int index = -1)","title":"Modify Widgets"},{"location":"pythonqt/#delete-widgets","text":"bool destroyWidget(QString widgetid)","title":"Delete Widgets"},{"location":"pythonqt/#presets_1","text":"void loadPreset(int presetIndex, int index = -1)","title":"Presets"},{"location":"pythonqt/#live-event-sheet","text":"QuteSheet* getSheet(int index = -1, int sheetIndex = -1) QuteSheet* getSheet(int index, QString sheetName)","title":"Live Event Sheet"},{"location":"pythonqt/#csound-api","text":"QString getVersion() void refresh() void setCsChannel(QString channel, double value, int index = -1) void setCsChannel(QString channel, QString value, int index = -1) double getCsChannel(QString channel, int index = -1) QString getCsStringChannel(QString channel, int index = -1) CSOUND* getCurrentCsound() double getSampleRate(int index = -1) int getKsmps(int index = -1) int getNumChannels(int index = -1) MYFLT *getTableArray(int ftable, int index = -1) void registerProcessCallback(QString func, int skipPeriods = 0, int index = -1)","title":"Csound / API"},{"location":"tips/","text":"Tips and Tricks Issues When you experience crashes , try to use \"Run in Term(inal)\" instead of the usual \"Run\". This will execute your Csound file in a Shell, and you may get error messages which helps you to find out the reason. (For instance a segmentation fault by Csound will by force crash CsoundQt, but should be visible in the Shell as \"segfault\" or similar.) Another frequent reason for crashes or hangs are problems with the Audio or MIDI settings . Open the Configure panel, and have a look at the Run tab. Try to set the MIDI Input Device to none (also the Output Device ), and uncheck Use Csound MIDI modules . For Audio , check whether the RT Audio Module is set properly (try portaudio if you are not sure). Set the Audio Input Device and Output Device to -adc (input) and -odac (output). See the Configure page for more info. If this error message appears ... *** PortAudio: error: -9998: Invalid number of channels ... it can have different reasons and fixes: You are using stereo output, but the input device (for instance internal microphone on a Mac) is only mono. Fix: Either disable audio input, or add the line nchnls_i = 1 to your .csd file. You are using more channels in your .csd file than you have available in your sound card. Fix: Reduce the nchnls to what is possible, or use Jack. If you experience bad crashes and none of the receipes helped, try Help > Reset Preferences . If the build-in Manual is not visible, go to Configure -> Environment -> HTML Doc Directory , push the \"...\" button and set the directory to where your Csound Manual is. Sometimes for a new installation of CsoundQt, the keyboard shortcuts are missing. In this case, go to Edit > Set Keyboard Shortcuts , and click Restore Defaults . Usage The Examples Menu provides a complete introduction to Csound and CsoundQt (\"Getting Started\"). You will also find the complete examples of the Csound FLOSS Manual , the McCurdy Collection (adapted to Csoundqt) and many others. Any example of the Canonical Csound Manual will open automatically in CsoundQt. Go to any page of the build.in manual, click on the .csd link (for instance \"diskin.csd\" on the \"diskin\" manual page), and the file will be loaded into CsoundQt as new tab. Just run it.","title":"Tips and Tricks"},{"location":"tips/#tips-and-tricks","text":"","title":"Tips and Tricks"},{"location":"tips/#issues","text":"When you experience crashes , try to use \"Run in Term(inal)\" instead of the usual \"Run\". This will execute your Csound file in a Shell, and you may get error messages which helps you to find out the reason. (For instance a segmentation fault by Csound will by force crash CsoundQt, but should be visible in the Shell as \"segfault\" or similar.) Another frequent reason for crashes or hangs are problems with the Audio or MIDI settings . Open the Configure panel, and have a look at the Run tab. Try to set the MIDI Input Device to none (also the Output Device ), and uncheck Use Csound MIDI modules . For Audio , check whether the RT Audio Module is set properly (try portaudio if you are not sure). Set the Audio Input Device and Output Device to -adc (input) and -odac (output). See the Configure page for more info. If this error message appears ... *** PortAudio: error: -9998: Invalid number of channels ... it can have different reasons and fixes: You are using stereo output, but the input device (for instance internal microphone on a Mac) is only mono. Fix: Either disable audio input, or add the line nchnls_i = 1 to your .csd file. You are using more channels in your .csd file than you have available in your sound card. Fix: Reduce the nchnls to what is possible, or use Jack. If you experience bad crashes and none of the receipes helped, try Help > Reset Preferences . If the build-in Manual is not visible, go to Configure -> Environment -> HTML Doc Directory , push the \"...\" button and set the directory to where your Csound Manual is. Sometimes for a new installation of CsoundQt, the keyboard shortcuts are missing. In this case, go to Edit > Set Keyboard Shortcuts , and click Restore Defaults .","title":"Issues"},{"location":"tips/#usage","text":"The Examples Menu provides a complete introduction to Csound and CsoundQt (\"Getting Started\"). You will also find the complete examples of the Csound FLOSS Manual , the McCurdy Collection (adapted to Csoundqt) and many others. Any example of the Canonical Csound Manual will open automatically in CsoundQt. Go to any page of the build.in manual, click on the .csd link (for instance \"diskin.csd\" on the \"diskin\" manual page), and the file will be loaded into CsoundQt as new tab. Just run it.","title":"Usage"},{"location":"utilities/","text":"Utilities The Utilities button gives acces to some of the major Csound Utilities. On the right side, you find the relevant page of the Csound Manual, which describes the usage and the parameters. On the left side, you find the default settings, which can be changed by typing and/or browsing input or output files. The Run ... button executes the utility with the current settings.","title":"Utilities"},{"location":"utilities/#utilities","text":"The Utilities button gives acces to some of the major Csound Utilities. On the right side, you find the relevant page of the Csound Manual, which describes the usage and the parameters. On the left side, you find the default settings, which can be changed by typing and/or browsing input or output files. The Run ... button executes the utility with the current settings.","title":"Utilities"}]}